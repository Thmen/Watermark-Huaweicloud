-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dct,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.648000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=483,HLS_SYN_LUT=1353}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_read_data_fu_16_ap_start : STD_LOGIC;
    signal grp_read_data_fu_16_ap_done : STD_LOGIC;
    signal grp_read_data_fu_16_ap_idle : STD_LOGIC;
    signal grp_read_data_fu_16_ap_ready : STD_LOGIC;
    signal grp_read_data_fu_16_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_data_fu_16_input_r_ce0 : STD_LOGIC;
    signal grp_read_data_fu_16_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_data_fu_16_input_r_ce1 : STD_LOGIC;
    signal grp_read_data_fu_16_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_16_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_ap_start : STD_LOGIC;
    signal grp_write_data_fu_22_ap_done : STD_LOGIC;
    signal grp_write_data_fu_22_ap_idle : STD_LOGIC;
    signal grp_write_data_fu_22_ap_ready : STD_LOGIC;
    signal grp_write_data_fu_22_p_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_p_read15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_data_fu_22_output_r_ce0 : STD_LOGIC;
    signal grp_write_data_fu_22_output_r_we0 : STD_LOGIC;
    signal grp_write_data_fu_22_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_22_output_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_data_fu_22_output_r_ce1 : STD_LOGIC;
    signal grp_write_data_fu_22_output_r_we1 : STD_LOGIC;
    signal grp_write_data_fu_22_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_reg_grp_write_data_fu_22_ap_start : STD_LOGIC := '0';
    signal ap_NS_fsm_state9 : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp1_fu_114_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_108_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_133_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_127_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_152_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_fu_146_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_171_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_165_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_184_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_i_i_fu_196_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_i_i_fu_202_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_190_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_215_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_i_i_fu_227_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_i_i_fu_233_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_221_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_246_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_i_i_fu_258_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_i_i_fu_264_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_252_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_277_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_i_i_fu_289_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_i_i_fu_295_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_283_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_i_i_fu_308_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_i_i_fu_314_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_i_i_fu_327_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_i_i_fu_333_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_i_i_fu_346_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_i_i_fu_352_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_i_i_fu_365_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_i_i_fu_371_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_384_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_i_i_fu_396_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_390_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_i_i_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_415_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_i_i_fu_427_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_421_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_i_i_fu_433_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_446_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_i_i_fu_458_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_452_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_i_i_fu_464_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_477_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_45_i_i_fu_489_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_483_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_i_i_fu_495_p2 : STD_LOGIC_VECTOR (15 downto 0);

    component read_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component write_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_read_data_fu_16 : component read_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_read_data_fu_16_ap_start,
        ap_done => grp_read_data_fu_16_ap_done,
        ap_idle => grp_read_data_fu_16_ap_idle,
        ap_ready => grp_read_data_fu_16_ap_ready,
        input_r_address0 => grp_read_data_fu_16_input_r_address0,
        input_r_ce0 => grp_read_data_fu_16_input_r_ce0,
        input_r_q0 => input_r_q0,
        input_r_address1 => grp_read_data_fu_16_input_r_address1,
        input_r_ce1 => grp_read_data_fu_16_input_r_ce1,
        input_r_q1 => input_r_q1,
        ap_return_0 => grp_read_data_fu_16_ap_return_0,
        ap_return_1 => grp_read_data_fu_16_ap_return_1,
        ap_return_2 => grp_read_data_fu_16_ap_return_2,
        ap_return_3 => grp_read_data_fu_16_ap_return_3,
        ap_return_4 => grp_read_data_fu_16_ap_return_4,
        ap_return_5 => grp_read_data_fu_16_ap_return_5,
        ap_return_6 => grp_read_data_fu_16_ap_return_6,
        ap_return_7 => grp_read_data_fu_16_ap_return_7,
        ap_return_8 => grp_read_data_fu_16_ap_return_8,
        ap_return_9 => grp_read_data_fu_16_ap_return_9,
        ap_return_10 => grp_read_data_fu_16_ap_return_10,
        ap_return_11 => grp_read_data_fu_16_ap_return_11,
        ap_return_12 => grp_read_data_fu_16_ap_return_12,
        ap_return_13 => grp_read_data_fu_16_ap_return_13,
        ap_return_14 => grp_read_data_fu_16_ap_return_14,
        ap_return_15 => grp_read_data_fu_16_ap_return_15);

    grp_write_data_fu_22 : component write_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_write_data_fu_22_ap_start,
        ap_done => grp_write_data_fu_22_ap_done,
        ap_idle => grp_write_data_fu_22_ap_idle,
        ap_ready => grp_write_data_fu_22_ap_ready,
        p_read => grp_write_data_fu_22_p_read,
        p_read1 => grp_write_data_fu_22_p_read1,
        p_read2 => grp_write_data_fu_22_p_read2,
        p_read3 => grp_write_data_fu_22_p_read3,
        p_read4 => grp_write_data_fu_22_p_read4,
        p_read5 => grp_write_data_fu_22_p_read5,
        p_read6 => grp_write_data_fu_22_p_read6,
        p_read7 => grp_write_data_fu_22_p_read7,
        p_read8 => grp_write_data_fu_22_p_read8,
        p_read9 => grp_write_data_fu_22_p_read9,
        p_read10 => grp_write_data_fu_22_p_read10,
        p_read11 => grp_write_data_fu_22_p_read11,
        p_read12 => grp_write_data_fu_22_p_read12,
        p_read13 => grp_write_data_fu_22_p_read13,
        p_read14 => grp_write_data_fu_22_p_read14,
        p_read15 => grp_write_data_fu_22_p_read15,
        output_r_address0 => grp_write_data_fu_22_output_r_address0,
        output_r_ce0 => grp_write_data_fu_22_output_r_ce0,
        output_r_we0 => grp_write_data_fu_22_output_r_we0,
        output_r_d0 => grp_write_data_fu_22_output_r_d0,
        output_r_address1 => grp_write_data_fu_22_output_r_address1,
        output_r_ce1 => grp_write_data_fu_22_output_r_ce1,
        output_r_we1 => grp_write_data_fu_22_output_r_we1,
        output_r_d1 => grp_write_data_fu_22_output_r_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_write_data_fu_22_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_write_data_fu_22_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state9) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_reg_grp_write_data_fu_22_ap_start <= ap_const_logic_1;
                elsif ((grp_write_data_fu_22_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_write_data_fu_22_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state9 <= ap_NS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_read_data_fu_16_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_read_data_fu_16_ap_start <= ap_const_logic_1;
        else 
            grp_read_data_fu_16_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_write_data_fu_22_ap_start <= ap_reg_grp_write_data_fu_22_ap_start;
    grp_write_data_fu_22_p_read <= std_logic_vector(unsigned(tmp1_fu_114_p2) + unsigned(tmp_fu_108_p2));
    grp_write_data_fu_22_p_read1 <= std_logic_vector(unsigned(tmp_10_i_i_fu_202_p2) - unsigned(tmp_2_fu_190_p2));
    grp_write_data_fu_22_p_read10 <= std_logic_vector(unsigned(tmp_28_i_i_fu_352_p2) + unsigned(grp_read_data_fu_16_ap_return_14));
    grp_write_data_fu_22_p_read11 <= std_logic_vector(unsigned(tmp_42_i_i_fu_464_p2) - unsigned(grp_read_data_fu_16_ap_return_14));
    grp_write_data_fu_22_p_read12 <= std_logic_vector(unsigned(tmp7_fu_171_p2) + unsigned(tmp6_fu_165_p2));
    grp_write_data_fu_22_p_read13 <= std_logic_vector(unsigned(tmp_22_i_i_fu_295_p2) - unsigned(tmp_8_fu_283_p2));
    grp_write_data_fu_22_p_read14 <= std_logic_vector(unsigned(tmp_30_i_i_fu_371_p2) + unsigned(grp_read_data_fu_16_ap_return_15));
    grp_write_data_fu_22_p_read15 <= std_logic_vector(unsigned(tmp_46_i_i_fu_495_p2) - unsigned(grp_read_data_fu_16_ap_return_15));
    grp_write_data_fu_22_p_read2 <= std_logic_vector(unsigned(tmp_24_i_i_fu_314_p2) + unsigned(grp_read_data_fu_16_ap_return_12));
    grp_write_data_fu_22_p_read3 <= std_logic_vector(unsigned(tmp_34_i_i_fu_402_p2) - unsigned(grp_read_data_fu_16_ap_return_12));
    grp_write_data_fu_22_p_read4 <= std_logic_vector(unsigned(tmp3_fu_133_p2) + unsigned(tmp2_fu_127_p2));
    grp_write_data_fu_22_p_read5 <= std_logic_vector(unsigned(tmp_14_i_i_fu_233_p2) - unsigned(tmp_4_fu_221_p2));
    grp_write_data_fu_22_p_read6 <= std_logic_vector(unsigned(tmp_26_i_i_fu_333_p2) + unsigned(grp_read_data_fu_16_ap_return_13));
    grp_write_data_fu_22_p_read7 <= std_logic_vector(unsigned(tmp_38_i_i_fu_433_p2) - unsigned(grp_read_data_fu_16_ap_return_13));
    grp_write_data_fu_22_p_read8 <= std_logic_vector(unsigned(tmp5_fu_152_p2) + unsigned(tmp4_fu_146_p2));
    grp_write_data_fu_22_p_read9 <= std_logic_vector(unsigned(tmp_18_i_i_fu_264_p2) - unsigned(tmp_6_fu_252_p2));
    input_r_address0 <= grp_read_data_fu_16_input_r_address0;
    input_r_address1 <= grp_read_data_fu_16_input_r_address1;
    input_r_ce0 <= grp_read_data_fu_16_input_r_ce0;
    input_r_ce1 <= grp_read_data_fu_16_input_r_ce1;
    output_r_address0 <= grp_write_data_fu_22_output_r_address0;
    output_r_address1 <= grp_write_data_fu_22_output_r_address1;
    output_r_ce0 <= grp_write_data_fu_22_output_r_ce0;
    output_r_ce1 <= grp_write_data_fu_22_output_r_ce1;
    output_r_d0 <= grp_write_data_fu_22_output_r_d0;
    output_r_d1 <= grp_write_data_fu_22_output_r_d1;
    output_r_we0 <= grp_write_data_fu_22_output_r_we0;
    output_r_we1 <= grp_write_data_fu_22_output_r_we1;
    tmp1_fu_114_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_8) + unsigned(grp_read_data_fu_16_ap_return_12));
    tmp2_fu_127_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_5) + unsigned(grp_read_data_fu_16_ap_return_1));
    tmp3_fu_133_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_9) + unsigned(grp_read_data_fu_16_ap_return_13));
    tmp4_fu_146_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_6) + unsigned(grp_read_data_fu_16_ap_return_2));
    tmp5_fu_152_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_10) + unsigned(grp_read_data_fu_16_ap_return_14));
    tmp6_fu_165_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_7) + unsigned(grp_read_data_fu_16_ap_return_3));
    tmp7_fu_171_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_11) + unsigned(grp_read_data_fu_16_ap_return_15));
    tmp_10_fu_390_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_8),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_10_i_i_fu_202_p2 <= std_logic_vector(unsigned(tmp_8_i_i_fu_196_p2) - unsigned(grp_read_data_fu_16_ap_return_8));
    tmp_11_fu_415_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_5),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_12_fu_421_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_9),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_13_fu_446_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_6),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_13_i_i_fu_227_p2 <= std_logic_vector(unsigned(tmp_3_fu_215_p2) + unsigned(grp_read_data_fu_16_ap_return_5));
    tmp_14_fu_452_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_10),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_14_i_i_fu_233_p2 <= std_logic_vector(unsigned(tmp_13_i_i_fu_227_p2) - unsigned(grp_read_data_fu_16_ap_return_9));
    tmp_15_fu_477_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_7),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_16_fu_483_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_11),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_17_i_i_fu_258_p2 <= std_logic_vector(unsigned(tmp_5_fu_246_p2) + unsigned(grp_read_data_fu_16_ap_return_6));
    tmp_18_i_i_fu_264_p2 <= std_logic_vector(unsigned(tmp_17_i_i_fu_258_p2) - unsigned(grp_read_data_fu_16_ap_return_10));
    tmp_1_fu_184_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_0),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_21_i_i_fu_289_p2 <= std_logic_vector(unsigned(tmp_7_fu_277_p2) + unsigned(grp_read_data_fu_16_ap_return_7));
    tmp_22_i_i_fu_295_p2 <= std_logic_vector(unsigned(tmp_21_i_i_fu_289_p2) - unsigned(grp_read_data_fu_16_ap_return_11));
    tmp_23_i_i_fu_308_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_0) - unsigned(grp_read_data_fu_16_ap_return_4));
    tmp_24_i_i_fu_314_p2 <= std_logic_vector(unsigned(tmp_23_i_i_fu_308_p2) - unsigned(grp_read_data_fu_16_ap_return_8));
    tmp_25_i_i_fu_327_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_1) - unsigned(grp_read_data_fu_16_ap_return_5));
    tmp_26_i_i_fu_333_p2 <= std_logic_vector(unsigned(tmp_25_i_i_fu_327_p2) - unsigned(grp_read_data_fu_16_ap_return_9));
    tmp_27_i_i_fu_346_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_2) - unsigned(grp_read_data_fu_16_ap_return_6));
    tmp_28_i_i_fu_352_p2 <= std_logic_vector(unsigned(tmp_27_i_i_fu_346_p2) - unsigned(grp_read_data_fu_16_ap_return_10));
    tmp_29_i_i_fu_365_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_3) - unsigned(grp_read_data_fu_16_ap_return_7));
    tmp_2_fu_190_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_12),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_30_i_i_fu_371_p2 <= std_logic_vector(unsigned(tmp_29_i_i_fu_365_p2) - unsigned(grp_read_data_fu_16_ap_return_11));
    tmp_33_i_i_fu_396_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_0) - unsigned(tmp_9_fu_384_p2));
    tmp_34_i_i_fu_402_p2 <= std_logic_vector(unsigned(tmp_33_i_i_fu_396_p2) + unsigned(tmp_10_fu_390_p2));
    tmp_37_i_i_fu_427_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_1) - unsigned(tmp_11_fu_415_p2));
    tmp_38_i_i_fu_433_p2 <= std_logic_vector(unsigned(tmp_37_i_i_fu_427_p2) + unsigned(tmp_12_fu_421_p2));
    tmp_3_fu_215_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_1),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_41_i_i_fu_458_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_2) - unsigned(tmp_13_fu_446_p2));
    tmp_42_i_i_fu_464_p2 <= std_logic_vector(unsigned(tmp_41_i_i_fu_458_p2) + unsigned(tmp_14_fu_452_p2));
    tmp_45_i_i_fu_489_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_3) - unsigned(tmp_15_fu_477_p2));
    tmp_46_i_i_fu_495_p2 <= std_logic_vector(unsigned(tmp_45_i_i_fu_489_p2) + unsigned(tmp_16_fu_483_p2));
    tmp_4_fu_221_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_13),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_5_fu_246_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_2),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_6_fu_252_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_14),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_7_fu_277_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_3),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_8_fu_283_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_15),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_8_i_i_fu_196_p2 <= std_logic_vector(unsigned(tmp_1_fu_184_p2) + unsigned(grp_read_data_fu_16_ap_return_4));
    tmp_9_fu_384_p2 <= std_logic_vector(shift_left(unsigned(grp_read_data_fu_16_ap_return_4),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_fu_108_p2 <= std_logic_vector(unsigned(grp_read_data_fu_16_ap_return_4) + unsigned(grp_read_data_fu_16_ap_return_0));
end behav;
