-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_step is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_ce1 : OUT STD_LOGIC;
    dst_we1 : OUT STD_LOGIC;
    dst_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_step is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_346 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_350 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_379_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_385 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_82_fu_445_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_82_reg_664 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_85_fu_506_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_85_reg_689 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_90_fu_567_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_90_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_95_fu_628_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_95_reg_729 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_58_fu_414_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_fu_475_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_64_fu_536_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_fu_597_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_367_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_373_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_390_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_56_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_57_fu_408_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_88_fu_396_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_104_fu_421_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_80_fu_433_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_108_fu_427_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_81_fu_439_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_89_fu_451_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_fu_463_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_fu_469_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_93_fu_457_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_fu_482_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_83_fu_494_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_110_fu_488_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_84_fu_500_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_94_fu_512_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_fu_524_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_63_fu_530_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_98_fu_518_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_111_fu_543_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_86_fu_555_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_fu_549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_87_fu_561_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_99_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_585_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_66_fu_591_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_103_fu_579_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_113_fu_604_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_91_fu_616_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_114_fu_610_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_92_fu_622_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_346 <= src_q0;
                reg_350 <= src_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_385 <= grp_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_82_reg_664 <= tmp_82_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_85_reg_689 <= tmp_85_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_90_reg_714 <= tmp_90_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_95_reg_729 <= tmp_95_fu_628_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dst_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dst_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dst_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dst_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dst_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            dst_address0 <= "XXXX";
        end if; 
    end process;


    dst_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dst_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dst_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dst_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dst_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            dst_address1 <= "XXXX";
        end if; 
    end process;


    dst_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            dst_ce0 <= ap_const_logic_1;
        else 
            dst_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            dst_ce1 <= ap_const_logic_1;
        else 
            dst_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dst_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, reg_385, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, grp_fu_360_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            dst_d0 <= reg_385;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dst_d0 <= grp_fu_360_p2;
        else 
            dst_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dst_d1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, tmp_82_reg_664, tmp_85_reg_689, tmp_90_reg_714, tmp_95_reg_729, ap_CS_fsm_state10, tmp_58_fu_414_p2, tmp_61_fu_475_p2, tmp_64_fu_536_p2, tmp_67_fu_597_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dst_d1 <= tmp_95_reg_729;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dst_d1 <= tmp_67_fu_597_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dst_d1 <= tmp_90_reg_714;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dst_d1 <= tmp_64_fu_536_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dst_d1 <= tmp_85_reg_689;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dst_d1 <= tmp_61_fu_475_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dst_d1 <= tmp_82_reg_664;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dst_d1 <= tmp_58_fu_414_p2;
        else 
            dst_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dst_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            dst_we0 <= ap_const_logic_1;
        else 
            dst_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dst_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            dst_we1 <= ap_const_logic_1;
        else 
            dst_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_340_p2 <= std_logic_vector(unsigned(src_q0) + unsigned(src_q1));
    grp_fu_354_p2 <= std_logic_vector(unsigned(reg_350) + unsigned(reg_346));
    grp_fu_360_p2 <= std_logic_vector(unsigned(grp_fu_340_p2) + unsigned(grp_fu_354_p2));
    grp_fu_367_p2 <= std_logic_vector(unsigned(reg_346) - unsigned(reg_350));
    grp_fu_373_p2 <= std_logic_vector(unsigned(grp_fu_367_p2) - unsigned(src_q0));
    grp_fu_379_p2 <= std_logic_vector(unsigned(src_q1) + unsigned(grp_fu_373_p2));

    src_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            src_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            src_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            src_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            src_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            src_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            src_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            src_address0 <= "XXXX";
        end if; 
    end process;


    src_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            src_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            src_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            src_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            src_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            src_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            src_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        else 
            src_address1 <= "XXXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_103_fu_579_p2 <= std_logic_vector(shift_left(unsigned(src_q1),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_104_fu_421_p2 <= std_logic_vector(shift_left(unsigned(reg_350),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_108_fu_427_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_109_fu_482_p2 <= std_logic_vector(shift_left(unsigned(reg_350),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_110_fu_488_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_111_fu_543_p2 <= std_logic_vector(shift_left(unsigned(reg_350),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_112_fu_549_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_113_fu_604_p2 <= std_logic_vector(shift_left(unsigned(reg_350),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_114_fu_610_p2 <= std_logic_vector(shift_left(unsigned(src_q0),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_56_fu_402_p2 <= std_logic_vector(unsigned(reg_350) + unsigned(tmp_fu_390_p2));
    tmp_57_fu_408_p2 <= std_logic_vector(unsigned(tmp_56_fu_402_p2) - unsigned(src_q0));
    tmp_58_fu_414_p2 <= std_logic_vector(unsigned(tmp_57_fu_408_p2) - unsigned(tmp_88_fu_396_p2));
    tmp_59_fu_463_p2 <= std_logic_vector(unsigned(reg_350) + unsigned(tmp_89_fu_451_p2));
    tmp_60_fu_469_p2 <= std_logic_vector(unsigned(tmp_59_fu_463_p2) - unsigned(src_q0));
    tmp_61_fu_475_p2 <= std_logic_vector(unsigned(tmp_60_fu_469_p2) - unsigned(tmp_93_fu_457_p2));
    tmp_62_fu_524_p2 <= std_logic_vector(unsigned(reg_350) + unsigned(tmp_94_fu_512_p2));
    tmp_63_fu_530_p2 <= std_logic_vector(unsigned(tmp_62_fu_524_p2) - unsigned(src_q0));
    tmp_64_fu_536_p2 <= std_logic_vector(unsigned(tmp_63_fu_530_p2) - unsigned(tmp_98_fu_518_p2));
    tmp_65_fu_585_p2 <= std_logic_vector(unsigned(reg_350) + unsigned(tmp_99_fu_573_p2));
    tmp_66_fu_591_p2 <= std_logic_vector(unsigned(tmp_65_fu_585_p2) - unsigned(src_q0));
    tmp_67_fu_597_p2 <= std_logic_vector(unsigned(tmp_66_fu_591_p2) - unsigned(tmp_103_fu_579_p2));
    tmp_80_fu_433_p2 <= std_logic_vector(unsigned(reg_346) - unsigned(tmp_104_fu_421_p2));
    tmp_81_fu_439_p2 <= std_logic_vector(unsigned(tmp_80_fu_433_p2) + unsigned(tmp_108_fu_427_p2));
    tmp_82_fu_445_p2 <= std_logic_vector(unsigned(tmp_81_fu_439_p2) - unsigned(src_q1));
    tmp_83_fu_494_p2 <= std_logic_vector(unsigned(reg_346) - unsigned(tmp_109_fu_482_p2));
    tmp_84_fu_500_p2 <= std_logic_vector(unsigned(tmp_83_fu_494_p2) + unsigned(tmp_110_fu_488_p2));
    tmp_85_fu_506_p2 <= std_logic_vector(unsigned(tmp_84_fu_500_p2) - unsigned(src_q1));
    tmp_86_fu_555_p2 <= std_logic_vector(unsigned(reg_346) - unsigned(tmp_111_fu_543_p2));
    tmp_87_fu_561_p2 <= std_logic_vector(unsigned(tmp_86_fu_555_p2) + unsigned(tmp_112_fu_549_p2));
    tmp_88_fu_396_p2 <= std_logic_vector(shift_left(unsigned(src_q1),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_89_fu_451_p2 <= std_logic_vector(shift_left(unsigned(reg_346),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_90_fu_567_p2 <= std_logic_vector(unsigned(tmp_87_fu_561_p2) - unsigned(src_q1));
    tmp_91_fu_616_p2 <= std_logic_vector(unsigned(reg_346) - unsigned(tmp_113_fu_604_p2));
    tmp_92_fu_622_p2 <= std_logic_vector(unsigned(tmp_91_fu_616_p2) + unsigned(tmp_114_fu_610_p2));
    tmp_93_fu_457_p2 <= std_logic_vector(shift_left(unsigned(src_q1),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_94_fu_512_p2 <= std_logic_vector(shift_left(unsigned(reg_346),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_95_fu_628_p2 <= std_logic_vector(unsigned(tmp_92_fu_622_p2) - unsigned(src_q1));
    tmp_98_fu_518_p2 <= std_logic_vector(shift_left(unsigned(src_q1),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_99_fu_573_p2 <= std_logic_vector(shift_left(unsigned(reg_346),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
    tmp_fu_390_p2 <= std_logic_vector(shift_left(unsigned(reg_346),to_integer(unsigned('0' & ap_const_lv16_1(16-1 downto 0)))));
end behav;
