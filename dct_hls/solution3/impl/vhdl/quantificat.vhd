-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity quantificat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    qsrc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    qsrc_ce0 : OUT STD_LOGIC;
    qsrc_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    qsrc_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    qsrc_ce1 : OUT STD_LOGIC;
    qsrc_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (19 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (19 downto 0) );
end;


architecture behav of quantificat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal qdst_1_1_V_write_a_reg_103 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_1_0_V_write_a_reg_115 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_1_2_V_write_a_reg_127 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_1_3_V_write_a_reg_139 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_0_3_V_write_a_reg_151 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_2_0_V_write_a_reg_163 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_2_1_V_write_a_reg_175 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_0_2_V_write_a_reg_187 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_2_2_V_write_a_reg_199 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_2_3_V_write_a_reg_211 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_0_1_V_write_a_reg_223 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_3_0_V_write_a_reg_235 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_3_1_V_write_a_reg_247 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_0_0_V_write_a_reg_259 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_3_2_V_write_a_reg_271 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_3_3_V_write_a_reg_283 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_reg_295 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal r_1_fu_312_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_1_reg_783 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_fu_318_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_788 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_346_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_reg_804 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_s_fu_395_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_s_reg_835 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel1_fu_427_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel1_reg_840 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel3_fu_442_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel3_reg_845 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_016_1_fu_457_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_016_1_reg_850 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_0_1_fu_465_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_0_1_reg_855 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_1_fu_489_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_4_1_reg_860 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_16_1_fu_493_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_16_1_reg_865 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_15_1_fu_505_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_15_1_reg_870 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_1_1_fu_517_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_1_1_reg_875 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_14_1_fu_529_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_14_1_reg_880 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_29_1_fu_545_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal qdst_V_28_1_fu_557_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_27_1_fu_569_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_2_1_fu_581_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_312_1_fu_597_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_311_1_fu_609_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_310_1_fu_621_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_3_1_fu_633_p6 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_phi_fu_299_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_337_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_355_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_11_fu_369_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_331_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_350_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_364_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_378_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal sel_tmp4_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal qdst_V_s_fu_741_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_420_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal newSel2_fu_435_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp1_fu_450_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_fu_472_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal qdst_V_1_fu_751_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_2_fu_761_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_3_fu_770_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal qdst_V_s_fu_741_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal qdst_V_1_fu_751_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal qdst_V_2_fu_761_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal qdst_V_3_fu_770_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal qdst_V_1_fu_751_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal qdst_V_s_fu_741_p00 : STD_LOGIC_VECTOR (19 downto 0);

    component img_proc_mux_42_6bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component img_proc_mux_42_2cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        din3 : IN STD_LOGIC_VECTOR (19 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component img_proc_mul_mul_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    img_proc_mux_42_6bkb_U3 : component img_proc_mux_42_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_19,
        din1 => ap_const_lv6_14,
        din2 => ap_const_lv6_19,
        din3 => ap_const_lv6_14,
        din4 => tmp_12_reg_804,
        dout => tmp_1_fu_378_p6);

    img_proc_mux_42_6bkb_U4 : component img_proc_mux_42_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_14,
        din1 => ap_const_lv6_10,
        din2 => ap_const_lv6_14,
        din3 => ap_const_lv6_10,
        din4 => tmp_12_reg_804,
        dout => tmp_2_fu_472_p6);

    img_proc_mux_42_2cud_U5 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_1_3_V_write_a_reg_139,
        din1 => qdst_1_3_V_write_a_reg_139,
        din2 => qdst_1_3_V_write_a_reg_139,
        din3 => qdst_V_1_fu_751_p2,
        din4 => tmp_12_reg_804,
        dout => qdst_V_16_1_fu_493_p6);

    img_proc_mux_42_2cud_U6 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_1_2_V_write_a_reg_127,
        din1 => qdst_1_2_V_write_a_reg_127,
        din2 => qdst_V_1_fu_751_p2,
        din3 => qdst_1_2_V_write_a_reg_127,
        din4 => tmp_12_reg_804,
        dout => qdst_V_15_1_fu_505_p6);

    img_proc_mux_42_2cud_U7 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_V_1_fu_751_p2,
        din1 => qdst_1_0_V_write_a_reg_115,
        din2 => qdst_1_0_V_write_a_reg_115,
        din3 => qdst_1_0_V_write_a_reg_115,
        din4 => tmp_12_reg_804,
        dout => qdst_V_1_1_fu_517_p6);

    img_proc_mux_42_2cud_U8 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_1_1_V_write_a_reg_103,
        din1 => qdst_V_1_fu_751_p2,
        din2 => qdst_1_1_V_write_a_reg_103,
        din3 => qdst_1_1_V_write_a_reg_103,
        din4 => tmp_12_reg_804,
        dout => qdst_V_14_1_fu_529_p6);

    img_proc_mux_42_2cud_U9 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_2_3_V_write_a_reg_211,
        din1 => qdst_2_3_V_write_a_reg_211,
        din2 => qdst_2_3_V_write_a_reg_211,
        din3 => qdst_V_2_fu_761_p2,
        din4 => tmp_12_reg_804,
        dout => qdst_V_29_1_fu_545_p6);

    img_proc_mux_42_2cud_U10 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_2_2_V_write_a_reg_199,
        din1 => qdst_2_2_V_write_a_reg_199,
        din2 => qdst_V_2_fu_761_p2,
        din3 => qdst_2_2_V_write_a_reg_199,
        din4 => tmp_12_reg_804,
        dout => qdst_V_28_1_fu_557_p6);

    img_proc_mux_42_2cud_U11 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_2_1_V_write_a_reg_175,
        din1 => qdst_V_2_fu_761_p2,
        din2 => qdst_2_1_V_write_a_reg_175,
        din3 => qdst_2_1_V_write_a_reg_175,
        din4 => tmp_12_reg_804,
        dout => qdst_V_27_1_fu_569_p6);

    img_proc_mux_42_2cud_U12 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_V_2_fu_761_p2,
        din1 => qdst_2_0_V_write_a_reg_163,
        din2 => qdst_2_0_V_write_a_reg_163,
        din3 => qdst_2_0_V_write_a_reg_163,
        din4 => tmp_12_reg_804,
        dout => qdst_V_2_1_fu_581_p6);

    img_proc_mux_42_2cud_U13 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_3_3_V_write_a_reg_283,
        din1 => qdst_3_3_V_write_a_reg_283,
        din2 => qdst_3_3_V_write_a_reg_283,
        din3 => qdst_V_3_fu_770_p2,
        din4 => tmp_12_reg_804,
        dout => qdst_V_312_1_fu_597_p6);

    img_proc_mux_42_2cud_U14 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_3_2_V_write_a_reg_271,
        din1 => qdst_3_2_V_write_a_reg_271,
        din2 => qdst_V_3_fu_770_p2,
        din3 => qdst_3_2_V_write_a_reg_271,
        din4 => tmp_12_reg_804,
        dout => qdst_V_311_1_fu_609_p6);

    img_proc_mux_42_2cud_U15 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_3_1_V_write_a_reg_247,
        din1 => qdst_V_3_fu_770_p2,
        din2 => qdst_3_1_V_write_a_reg_247,
        din3 => qdst_3_1_V_write_a_reg_247,
        din4 => tmp_12_reg_804,
        dout => qdst_V_310_1_fu_621_p6);

    img_proc_mux_42_2cud_U16 : component img_proc_mux_42_2cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 20,
        din2_WIDTH => 20,
        din3_WIDTH => 20,
        din4_WIDTH => 2,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_V_3_fu_770_p2,
        din1 => qdst_3_0_V_write_a_reg_235,
        din2 => qdst_3_0_V_write_a_reg_235,
        din3 => qdst_3_0_V_write_a_reg_235,
        din4 => tmp_12_reg_804,
        dout => qdst_V_3_1_fu_633_p6);

    img_proc_mul_mul_dEe_U17 : component img_proc_mul_mul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_V_s_fu_741_p0,
        din1 => qsrc_q0,
        dout => qdst_V_s_fu_741_p2);

    img_proc_mul_mul_dEe_U18 : component img_proc_mul_mul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_V_1_fu_751_p0,
        din1 => qsrc_q1,
        dout => qdst_V_1_fu_751_p2);

    img_proc_mul_mul_dEe_U19 : component img_proc_mul_mul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_V_2_fu_761_p0,
        din1 => qsrc_q0,
        dout => qdst_V_2_fu_761_p2);

    img_proc_mul_mul_dEe_U20 : component img_proc_mul_mul_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 20)
    port map (
        din0 => qdst_V_3_fu_770_p0,
        din1 => qsrc_q1,
        dout => qdst_V_3_fu_770_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    r_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_779 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_reg_295 <= r_1_reg_783;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_reg_295 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_reg_779 <= exitcond1_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_779 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                newSel1_reg_840 <= newSel1_fu_427_p3;
                newSel3_reg_845 <= newSel3_fu_442_p3;
                qdst_V_016_1_reg_850 <= qdst_V_016_1_fu_457_p3;
                qdst_V_0_1_reg_855 <= qdst_V_0_1_fu_465_p3;
                qdst_V_14_1_reg_880 <= qdst_V_14_1_fu_529_p6;
                qdst_V_15_1_reg_870 <= qdst_V_15_1_fu_505_p6;
                qdst_V_16_1_reg_865 <= qdst_V_16_1_fu_493_p6;
                qdst_V_1_1_reg_875 <= qdst_V_1_1_fu_517_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_779 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                qdst_0_0_V_write_a_reg_259 <= qdst_V_0_1_reg_855;
                qdst_0_1_V_write_a_reg_223 <= qdst_V_016_1_reg_850;
                qdst_0_2_V_write_a_reg_187 <= newSel3_reg_845;
                qdst_0_3_V_write_a_reg_151 <= newSel1_reg_840;
                qdst_1_0_V_write_a_reg_115 <= qdst_V_1_1_reg_875;
                qdst_1_1_V_write_a_reg_103 <= qdst_V_14_1_reg_880;
                qdst_1_2_V_write_a_reg_127 <= qdst_V_15_1_reg_870;
                qdst_1_3_V_write_a_reg_139 <= qdst_V_16_1_reg_865;
                qdst_2_0_V_write_a_reg_163 <= qdst_V_2_1_fu_581_p6;
                qdst_2_1_V_write_a_reg_175 <= qdst_V_27_1_fu_569_p6;
                qdst_2_2_V_write_a_reg_199 <= qdst_V_28_1_fu_557_p6;
                qdst_2_3_V_write_a_reg_211 <= qdst_V_29_1_fu_545_p6;
                qdst_3_0_V_write_a_reg_235 <= qdst_V_3_1_fu_633_p6;
                qdst_3_1_V_write_a_reg_247 <= qdst_V_310_1_fu_621_p6;
                qdst_3_2_V_write_a_reg_271 <= qdst_V_311_1_fu_609_p6;
                qdst_3_3_V_write_a_reg_283 <= qdst_V_312_1_fu_597_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                r_1_reg_783 <= r_1_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_12_reg_804 <= tmp_12_fu_346_p1;
                    tmp_reg_788(4 downto 2) <= tmp_fu_318_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_reg_779 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    tmp_4_1_reg_860(5 downto 0) <= tmp_4_1_fu_489_p1(5 downto 0);
                    tmp_s_reg_835(5 downto 0) <= tmp_s_fu_395_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_788(1 downto 0) <= "00";
    tmp_s_reg_835(19 downto 6) <= "00000000000000";
    tmp_4_1_reg_860(19 downto 6) <= "00000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond1_fu_306_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond1_fu_306_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond1_fu_306_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond1_fu_306_p2)
    begin
        if ((exitcond1_fu_306_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_r_phi_fu_299_p4_assign_proc : process(r_reg_295, exitcond1_reg_779, ap_CS_fsm_pp0_stage0, r_1_reg_783, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond1_reg_779 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_phi_fu_299_p4 <= r_1_reg_783;
        else 
            ap_phi_mux_r_phi_fu_299_p4 <= r_reg_295;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= qdst_0_0_V_write_a_reg_259;
    ap_return_1 <= qdst_0_1_V_write_a_reg_223;
    ap_return_10 <= qdst_2_2_V_write_a_reg_199;
    ap_return_11 <= qdst_2_3_V_write_a_reg_211;
    ap_return_12 <= qdst_3_0_V_write_a_reg_235;
    ap_return_13 <= qdst_3_1_V_write_a_reg_247;
    ap_return_14 <= qdst_3_2_V_write_a_reg_271;
    ap_return_15 <= qdst_3_3_V_write_a_reg_283;
    ap_return_2 <= qdst_0_2_V_write_a_reg_187;
    ap_return_3 <= qdst_0_3_V_write_a_reg_151;
    ap_return_4 <= qdst_1_0_V_write_a_reg_115;
    ap_return_5 <= qdst_1_1_V_write_a_reg_103;
    ap_return_6 <= qdst_1_2_V_write_a_reg_127;
    ap_return_7 <= qdst_1_3_V_write_a_reg_139;
    ap_return_8 <= qdst_2_0_V_write_a_reg_163;
    ap_return_9 <= qdst_2_1_V_write_a_reg_175;
    exitcond1_fu_306_p2 <= "1" when (ap_phi_mux_r_phi_fu_299_p4 = ap_const_lv3_4) else "0";
    newSel1_fu_427_p3 <= 
        qdst_0_3_V_write_a_reg_151 when (or_cond_fu_414_p2(0) = '1') else 
        newSel_fu_420_p3;
    newSel2_fu_435_p3 <= 
        qdst_V_s_fu_741_p2 when (sel_tmp_fu_399_p2(0) = '1') else 
        qdst_0_2_V_write_a_reg_187;
    newSel3_fu_442_p3 <= 
        qdst_0_2_V_write_a_reg_187 when (or_cond_fu_414_p2(0) = '1') else 
        newSel2_fu_435_p3;
    newSel_fu_420_p3 <= 
        qdst_0_3_V_write_a_reg_151 when (sel_tmp_fu_399_p2(0) = '1') else 
        qdst_V_s_fu_741_p2;
    or_cond_fu_414_p2 <= (sel_tmp4_fu_409_p2 or sel_tmp2_fu_404_p2);
    qdst_V_016_1_fu_457_p3 <= 
        qdst_0_1_V_write_a_reg_223 when (sel_tmp4_fu_409_p2(0) = '1') else 
        sel_tmp1_fu_450_p3;
    qdst_V_0_1_fu_465_p3 <= 
        qdst_V_s_fu_741_p2 when (sel_tmp4_fu_409_p2(0) = '1') else 
        qdst_0_0_V_write_a_reg_259;
    qdst_V_1_fu_751_p0 <= qdst_V_1_fu_751_p00(6 - 1 downto 0);
    qdst_V_1_fu_751_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_472_p6),20));
    qdst_V_2_fu_761_p0 <= tmp_s_reg_835(6 - 1 downto 0);
    qdst_V_3_fu_770_p0 <= tmp_4_1_reg_860(6 - 1 downto 0);
    qdst_V_s_fu_741_p0 <= qdst_V_s_fu_741_p00(6 - 1 downto 0);
    qdst_V_s_fu_741_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_378_p6),20));

    qsrc_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, tmp_5_fu_326_p1, tmp_9_fu_355_p3, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                qsrc_address0 <= tmp_9_fu_355_p3(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                qsrc_address0 <= tmp_5_fu_326_p1(4 - 1 downto 0);
            else 
                qsrc_address0 <= "XXXX";
            end if;
        else 
            qsrc_address0 <= "XXXX";
        end if; 
    end process;


    qsrc_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, tmp_7_fu_337_p3, ap_block_pp0_stage1, tmp_11_fu_369_p3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                qsrc_address1 <= tmp_11_fu_369_p3(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                qsrc_address1 <= tmp_7_fu_337_p3(4 - 1 downto 0);
            else 
                qsrc_address1 <= "XXXX";
            end if;
        else 
            qsrc_address1 <= "XXXX";
        end if; 
    end process;


    qsrc_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            qsrc_ce0 <= ap_const_logic_1;
        else 
            qsrc_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    qsrc_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            qsrc_ce1 <= ap_const_logic_1;
        else 
            qsrc_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_312_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_phi_fu_299_p4) + unsigned(ap_const_lv3_1));
    sel_tmp1_fu_450_p3 <= 
        qdst_V_s_fu_741_p2 when (sel_tmp2_fu_404_p2(0) = '1') else 
        qdst_0_1_V_write_a_reg_223;
    sel_tmp2_fu_404_p2 <= "1" when (tmp_12_reg_804 = ap_const_lv2_1) else "0";
    sel_tmp4_fu_409_p2 <= "1" when (tmp_12_reg_804 = ap_const_lv2_0) else "0";
    sel_tmp_fu_399_p2 <= "1" when (tmp_12_reg_804 = ap_const_lv2_2) else "0";
    tmp_10_fu_364_p2 <= (tmp_reg_788 or ap_const_lv5_3);
    tmp_11_fu_369_p3 <= (ap_const_lv59_0 & tmp_10_fu_364_p2);
    tmp_12_fu_346_p1 <= ap_phi_mux_r_phi_fu_299_p4(2 - 1 downto 0);
    tmp_4_1_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_472_p6),20));
    tmp_5_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_318_p3),64));
    tmp_6_fu_331_p2 <= (tmp_fu_318_p3 or ap_const_lv5_1);
    tmp_7_fu_337_p3 <= (ap_const_lv59_0 & tmp_6_fu_331_p2);
    tmp_8_fu_350_p2 <= (tmp_reg_788 or ap_const_lv5_2);
    tmp_9_fu_355_p3 <= (ap_const_lv59_0 & tmp_8_fu_350_p2);
    tmp_fu_318_p3 <= (ap_phi_mux_r_phi_fu_299_p4 & ap_const_lv2_0);
    tmp_s_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_378_p6),20));
end behav;
