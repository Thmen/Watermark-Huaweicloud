// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module quantificat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        qsrc_address0,
        qsrc_ce0,
        qsrc_q0,
        qsrc_address1,
        qsrc_ce1,
        qsrc_q1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] qsrc_address0;
output   qsrc_ce0;
input  [15:0] qsrc_q0;
output  [3:0] qsrc_address1;
output   qsrc_ce1;
input  [15:0] qsrc_q1;
output  [19:0] ap_return_0;
output  [19:0] ap_return_1;
output  [19:0] ap_return_2;
output  [19:0] ap_return_3;
output  [19:0] ap_return_4;
output  [19:0] ap_return_5;
output  [19:0] ap_return_6;
output  [19:0] ap_return_7;
output  [19:0] ap_return_8;
output  [19:0] ap_return_9;
output  [19:0] ap_return_10;
output  [19:0] ap_return_11;
output  [19:0] ap_return_12;
output  [19:0] ap_return_13;
output  [19:0] ap_return_14;
output  [19:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] qsrc_address0;
reg qsrc_ce0;
reg[3:0] qsrc_address1;
reg qsrc_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [19:0] qdst_1_1_V_write_a_reg_103;
reg   [19:0] qdst_1_0_V_write_a_reg_115;
reg   [19:0] qdst_1_2_V_write_a_reg_127;
reg   [19:0] qdst_1_3_V_write_a_reg_139;
reg   [19:0] qdst_0_3_V_write_a_reg_151;
reg   [19:0] qdst_2_0_V_write_a_reg_163;
reg   [19:0] qdst_2_1_V_write_a_reg_175;
reg   [19:0] qdst_0_2_V_write_a_reg_187;
reg   [19:0] qdst_2_2_V_write_a_reg_199;
reg   [19:0] qdst_2_3_V_write_a_reg_211;
reg   [19:0] qdst_0_1_V_write_a_reg_223;
reg   [19:0] qdst_3_0_V_write_a_reg_235;
reg   [19:0] qdst_3_1_V_write_a_reg_247;
reg   [19:0] qdst_0_0_V_write_a_reg_259;
reg   [19:0] qdst_3_2_V_write_a_reg_271;
reg   [19:0] qdst_3_3_V_write_a_reg_283;
reg   [2:0] r_reg_295;
wire   [0:0] exitcond1_fu_306_p2;
reg   [0:0] exitcond1_reg_779;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] r_1_fu_312_p2;
reg   [2:0] r_1_reg_783;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] tmp_fu_318_p3;
reg   [4:0] tmp_reg_788;
wire   [1:0] tmp_12_fu_346_p1;
reg   [1:0] tmp_12_reg_804;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [19:0] tmp_s_fu_395_p1;
reg   [19:0] tmp_s_reg_835;
wire   [19:0] newSel1_fu_427_p3;
reg   [19:0] newSel1_reg_840;
wire   [19:0] newSel3_fu_442_p3;
reg   [19:0] newSel3_reg_845;
wire   [19:0] qdst_V_016_1_fu_457_p3;
reg   [19:0] qdst_V_016_1_reg_850;
wire   [19:0] qdst_V_0_1_fu_465_p3;
reg   [19:0] qdst_V_0_1_reg_855;
wire   [19:0] tmp_4_1_fu_489_p1;
reg   [19:0] tmp_4_1_reg_860;
wire   [19:0] qdst_V_16_1_fu_493_p6;
reg   [19:0] qdst_V_16_1_reg_865;
wire   [19:0] qdst_V_15_1_fu_505_p6;
reg   [19:0] qdst_V_15_1_reg_870;
wire   [19:0] qdst_V_1_1_fu_517_p6;
reg   [19:0] qdst_V_1_1_reg_875;
wire   [19:0] qdst_V_14_1_fu_529_p6;
reg   [19:0] qdst_V_14_1_reg_880;
wire   [19:0] qdst_V_29_1_fu_545_p6;
reg    ap_enable_reg_pp0_iter1;
wire   [19:0] qdst_V_28_1_fu_557_p6;
wire   [19:0] qdst_V_27_1_fu_569_p6;
wire   [19:0] qdst_V_2_1_fu_581_p6;
wire   [19:0] qdst_V_312_1_fu_597_p6;
wire   [19:0] qdst_V_311_1_fu_609_p6;
wire   [19:0] qdst_V_310_1_fu_621_p6;
wire   [19:0] qdst_V_3_1_fu_633_p6;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_r_phi_fu_299_p4;
wire   [63:0] tmp_5_fu_326_p1;
wire   [63:0] tmp_7_fu_337_p3;
wire   [63:0] tmp_9_fu_355_p3;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_11_fu_369_p3;
wire   [4:0] tmp_6_fu_331_p2;
wire   [4:0] tmp_8_fu_350_p2;
wire   [4:0] tmp_10_fu_364_p2;
wire   [5:0] tmp_1_fu_378_p6;
wire   [0:0] sel_tmp4_fu_409_p2;
wire   [0:0] sel_tmp2_fu_404_p2;
wire   [0:0] sel_tmp_fu_399_p2;
wire  signed [19:0] qdst_V_s_fu_741_p2;
wire   [0:0] or_cond_fu_414_p2;
wire   [19:0] newSel_fu_420_p3;
wire   [19:0] newSel2_fu_435_p3;
wire   [19:0] sel_tmp1_fu_450_p3;
wire   [5:0] tmp_2_fu_472_p6;
wire  signed [19:0] qdst_V_1_fu_751_p2;
wire  signed [19:0] qdst_V_2_fu_761_p2;
wire  signed [19:0] qdst_V_3_fu_770_p2;
wire    ap_CS_fsm_state5;
wire   [5:0] qdst_V_s_fu_741_p0;
wire   [5:0] qdst_V_1_fu_751_p0;
wire   [5:0] qdst_V_2_fu_761_p0;
wire   [5:0] qdst_V_3_fu_770_p0;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [19:0] qdst_V_1_fu_751_p00;
wire   [19:0] qdst_V_s_fu_741_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

img_proc_mux_42_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
img_proc_mux_42_6bkb_U3(
    .din0(6'd25),
    .din1(6'd20),
    .din2(6'd25),
    .din3(6'd20),
    .din4(tmp_12_reg_804),
    .dout(tmp_1_fu_378_p6)
);

img_proc_mux_42_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
img_proc_mux_42_6bkb_U4(
    .din0(6'd20),
    .din1(6'd16),
    .din2(6'd20),
    .din3(6'd16),
    .din4(tmp_12_reg_804),
    .dout(tmp_2_fu_472_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U5(
    .din0(qdst_1_3_V_write_a_reg_139),
    .din1(qdst_1_3_V_write_a_reg_139),
    .din2(qdst_1_3_V_write_a_reg_139),
    .din3(qdst_V_1_fu_751_p2),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_16_1_fu_493_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U6(
    .din0(qdst_1_2_V_write_a_reg_127),
    .din1(qdst_1_2_V_write_a_reg_127),
    .din2(qdst_V_1_fu_751_p2),
    .din3(qdst_1_2_V_write_a_reg_127),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_15_1_fu_505_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U7(
    .din0(qdst_V_1_fu_751_p2),
    .din1(qdst_1_0_V_write_a_reg_115),
    .din2(qdst_1_0_V_write_a_reg_115),
    .din3(qdst_1_0_V_write_a_reg_115),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_1_1_fu_517_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U8(
    .din0(qdst_1_1_V_write_a_reg_103),
    .din1(qdst_V_1_fu_751_p2),
    .din2(qdst_1_1_V_write_a_reg_103),
    .din3(qdst_1_1_V_write_a_reg_103),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_14_1_fu_529_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U9(
    .din0(qdst_2_3_V_write_a_reg_211),
    .din1(qdst_2_3_V_write_a_reg_211),
    .din2(qdst_2_3_V_write_a_reg_211),
    .din3(qdst_V_2_fu_761_p2),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_29_1_fu_545_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U10(
    .din0(qdst_2_2_V_write_a_reg_199),
    .din1(qdst_2_2_V_write_a_reg_199),
    .din2(qdst_V_2_fu_761_p2),
    .din3(qdst_2_2_V_write_a_reg_199),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_28_1_fu_557_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U11(
    .din0(qdst_2_1_V_write_a_reg_175),
    .din1(qdst_V_2_fu_761_p2),
    .din2(qdst_2_1_V_write_a_reg_175),
    .din3(qdst_2_1_V_write_a_reg_175),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_27_1_fu_569_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U12(
    .din0(qdst_V_2_fu_761_p2),
    .din1(qdst_2_0_V_write_a_reg_163),
    .din2(qdst_2_0_V_write_a_reg_163),
    .din3(qdst_2_0_V_write_a_reg_163),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_2_1_fu_581_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U13(
    .din0(qdst_3_3_V_write_a_reg_283),
    .din1(qdst_3_3_V_write_a_reg_283),
    .din2(qdst_3_3_V_write_a_reg_283),
    .din3(qdst_V_3_fu_770_p2),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_312_1_fu_597_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U14(
    .din0(qdst_3_2_V_write_a_reg_271),
    .din1(qdst_3_2_V_write_a_reg_271),
    .din2(qdst_V_3_fu_770_p2),
    .din3(qdst_3_2_V_write_a_reg_271),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_311_1_fu_609_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U15(
    .din0(qdst_3_1_V_write_a_reg_247),
    .din1(qdst_V_3_fu_770_p2),
    .din2(qdst_3_1_V_write_a_reg_247),
    .din3(qdst_3_1_V_write_a_reg_247),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_310_1_fu_621_p6)
);

img_proc_mux_42_2cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 20 ),
    .din2_WIDTH( 20 ),
    .din3_WIDTH( 20 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 20 ))
img_proc_mux_42_2cud_U16(
    .din0(qdst_V_3_fu_770_p2),
    .din1(qdst_3_0_V_write_a_reg_235),
    .din2(qdst_3_0_V_write_a_reg_235),
    .din3(qdst_3_0_V_write_a_reg_235),
    .din4(tmp_12_reg_804),
    .dout(qdst_V_3_1_fu_633_p6)
);

img_proc_mul_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 20 ))
img_proc_mul_mul_dEe_U17(
    .din0(qdst_V_s_fu_741_p0),
    .din1(qsrc_q0),
    .dout(qdst_V_s_fu_741_p2)
);

img_proc_mul_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 20 ))
img_proc_mul_mul_dEe_U18(
    .din0(qdst_V_1_fu_751_p0),
    .din1(qsrc_q1),
    .dout(qdst_V_1_fu_751_p2)
);

img_proc_mul_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 20 ))
img_proc_mul_mul_dEe_U19(
    .din0(qdst_V_2_fu_761_p0),
    .din1(qsrc_q0),
    .dout(qdst_V_2_fu_761_p2)
);

img_proc_mul_mul_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 20 ))
img_proc_mul_mul_dEe_U20(
    .din0(qdst_V_3_fu_770_p0),
    .din1(qsrc_q1),
    .dout(qdst_V_3_fu_770_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_779 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_reg_295 <= r_1_reg_783;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_reg_295 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_779 <= exitcond1_fu_306_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_779 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        newSel1_reg_840 <= newSel1_fu_427_p3;
        newSel3_reg_845 <= newSel3_fu_442_p3;
        qdst_V_016_1_reg_850 <= qdst_V_016_1_fu_457_p3;
        qdst_V_0_1_reg_855 <= qdst_V_0_1_fu_465_p3;
        qdst_V_14_1_reg_880 <= qdst_V_14_1_fu_529_p6;
        qdst_V_15_1_reg_870 <= qdst_V_15_1_fu_505_p6;
        qdst_V_16_1_reg_865 <= qdst_V_16_1_fu_493_p6;
        qdst_V_1_1_reg_875 <= qdst_V_1_1_fu_517_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_779 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        qdst_0_0_V_write_a_reg_259 <= qdst_V_0_1_reg_855;
        qdst_0_1_V_write_a_reg_223 <= qdst_V_016_1_reg_850;
        qdst_0_2_V_write_a_reg_187 <= newSel3_reg_845;
        qdst_0_3_V_write_a_reg_151 <= newSel1_reg_840;
        qdst_1_0_V_write_a_reg_115 <= qdst_V_1_1_reg_875;
        qdst_1_1_V_write_a_reg_103 <= qdst_V_14_1_reg_880;
        qdst_1_2_V_write_a_reg_127 <= qdst_V_15_1_reg_870;
        qdst_1_3_V_write_a_reg_139 <= qdst_V_16_1_reg_865;
        qdst_2_0_V_write_a_reg_163 <= qdst_V_2_1_fu_581_p6;
        qdst_2_1_V_write_a_reg_175 <= qdst_V_27_1_fu_569_p6;
        qdst_2_2_V_write_a_reg_199 <= qdst_V_28_1_fu_557_p6;
        qdst_2_3_V_write_a_reg_211 <= qdst_V_29_1_fu_545_p6;
        qdst_3_0_V_write_a_reg_235 <= qdst_V_3_1_fu_633_p6;
        qdst_3_1_V_write_a_reg_247 <= qdst_V_310_1_fu_621_p6;
        qdst_3_2_V_write_a_reg_271 <= qdst_V_311_1_fu_609_p6;
        qdst_3_3_V_write_a_reg_283 <= qdst_V_312_1_fu_597_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        r_1_reg_783 <= r_1_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_12_reg_804 <= tmp_12_fu_346_p1;
        tmp_reg_788[4 : 2] <= tmp_fu_318_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_reg_779 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_4_1_reg_860[5 : 0] <= tmp_4_1_fu_489_p1[5 : 0];
        tmp_s_reg_835[5 : 0] <= tmp_s_fu_395_p1[5 : 0];
    end
end

always @ (*) begin
    if ((exitcond1_fu_306_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_reg_779 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_phi_fu_299_p4 = r_1_reg_783;
    end else begin
        ap_phi_mux_r_phi_fu_299_p4 = r_reg_295;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            qsrc_address0 = tmp_9_fu_355_p3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            qsrc_address0 = tmp_5_fu_326_p1;
        end else begin
            qsrc_address0 = 'bx;
        end
    end else begin
        qsrc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            qsrc_address1 = tmp_11_fu_369_p3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            qsrc_address1 = tmp_7_fu_337_p3;
        end else begin
            qsrc_address1 = 'bx;
        end
    end else begin
        qsrc_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        qsrc_ce0 = 1'b1;
    end else begin
        qsrc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        qsrc_ce1 = 1'b1;
    end else begin
        qsrc_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond1_fu_306_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((exitcond1_fu_306_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = qdst_0_0_V_write_a_reg_259;

assign ap_return_1 = qdst_0_1_V_write_a_reg_223;

assign ap_return_10 = qdst_2_2_V_write_a_reg_199;

assign ap_return_11 = qdst_2_3_V_write_a_reg_211;

assign ap_return_12 = qdst_3_0_V_write_a_reg_235;

assign ap_return_13 = qdst_3_1_V_write_a_reg_247;

assign ap_return_14 = qdst_3_2_V_write_a_reg_271;

assign ap_return_15 = qdst_3_3_V_write_a_reg_283;

assign ap_return_2 = qdst_0_2_V_write_a_reg_187;

assign ap_return_3 = qdst_0_3_V_write_a_reg_151;

assign ap_return_4 = qdst_1_0_V_write_a_reg_115;

assign ap_return_5 = qdst_1_1_V_write_a_reg_103;

assign ap_return_6 = qdst_1_2_V_write_a_reg_127;

assign ap_return_7 = qdst_1_3_V_write_a_reg_139;

assign ap_return_8 = qdst_2_0_V_write_a_reg_163;

assign ap_return_9 = qdst_2_1_V_write_a_reg_175;

assign exitcond1_fu_306_p2 = ((ap_phi_mux_r_phi_fu_299_p4 == 3'd4) ? 1'b1 : 1'b0);

assign newSel1_fu_427_p3 = ((or_cond_fu_414_p2[0:0] === 1'b1) ? qdst_0_3_V_write_a_reg_151 : newSel_fu_420_p3);

assign newSel2_fu_435_p3 = ((sel_tmp_fu_399_p2[0:0] === 1'b1) ? qdst_V_s_fu_741_p2 : qdst_0_2_V_write_a_reg_187);

assign newSel3_fu_442_p3 = ((or_cond_fu_414_p2[0:0] === 1'b1) ? qdst_0_2_V_write_a_reg_187 : newSel2_fu_435_p3);

assign newSel_fu_420_p3 = ((sel_tmp_fu_399_p2[0:0] === 1'b1) ? qdst_0_3_V_write_a_reg_151 : qdst_V_s_fu_741_p2);

assign or_cond_fu_414_p2 = (sel_tmp4_fu_409_p2 | sel_tmp2_fu_404_p2);

assign qdst_V_016_1_fu_457_p3 = ((sel_tmp4_fu_409_p2[0:0] === 1'b1) ? qdst_0_1_V_write_a_reg_223 : sel_tmp1_fu_450_p3);

assign qdst_V_0_1_fu_465_p3 = ((sel_tmp4_fu_409_p2[0:0] === 1'b1) ? qdst_V_s_fu_741_p2 : qdst_0_0_V_write_a_reg_259);

assign qdst_V_1_fu_751_p0 = qdst_V_1_fu_751_p00;

assign qdst_V_1_fu_751_p00 = tmp_2_fu_472_p6;

assign qdst_V_2_fu_761_p0 = tmp_s_reg_835;

assign qdst_V_3_fu_770_p0 = tmp_4_1_reg_860;

assign qdst_V_s_fu_741_p0 = qdst_V_s_fu_741_p00;

assign qdst_V_s_fu_741_p00 = tmp_1_fu_378_p6;

assign r_1_fu_312_p2 = (ap_phi_mux_r_phi_fu_299_p4 + 3'd1);

assign sel_tmp1_fu_450_p3 = ((sel_tmp2_fu_404_p2[0:0] === 1'b1) ? qdst_V_s_fu_741_p2 : qdst_0_1_V_write_a_reg_223);

assign sel_tmp2_fu_404_p2 = ((tmp_12_reg_804 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_409_p2 = ((tmp_12_reg_804 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_399_p2 = ((tmp_12_reg_804 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_10_fu_364_p2 = (tmp_reg_788 | 5'd3);

assign tmp_11_fu_369_p3 = {{59'd0}, {tmp_10_fu_364_p2}};

assign tmp_12_fu_346_p1 = ap_phi_mux_r_phi_fu_299_p4[1:0];

assign tmp_4_1_fu_489_p1 = tmp_2_fu_472_p6;

assign tmp_5_fu_326_p1 = tmp_fu_318_p3;

assign tmp_6_fu_331_p2 = (tmp_fu_318_p3 | 5'd1);

assign tmp_7_fu_337_p3 = {{59'd0}, {tmp_6_fu_331_p2}};

assign tmp_8_fu_350_p2 = (tmp_reg_788 | 5'd2);

assign tmp_9_fu_355_p3 = {{59'd0}, {tmp_8_fu_350_p2}};

assign tmp_fu_318_p3 = {{ap_phi_mux_r_phi_fu_299_p4}, {2'd0}};

assign tmp_s_fu_395_p1 = tmp_1_fu_378_p6;

always @ (posedge ap_clk) begin
    tmp_reg_788[1:0] <= 2'b00;
    tmp_s_reg_835[19:6] <= 14'b00000000000000;
    tmp_4_1_reg_860[19:6] <= 14'b00000000000000;
end

endmodule //quantificat
