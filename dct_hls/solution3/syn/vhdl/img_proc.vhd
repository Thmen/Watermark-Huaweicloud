-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity img_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    img_ce0 : OUT STD_LOGIC;
    img_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    img_ce1 : OUT STD_LOGIC;
    img_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    mark_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    mark_ce0 : OUT STD_LOGIC;
    mark_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (19 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_address1 : OUT STD_LOGIC_VECTOR (19 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_we1 : OUT STD_LOGIC;
    out_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of img_proc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "img_proc,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.465000,HLS_SYN_LAT=5720001,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=4,HLS_SYN_FF=1775,HLS_SYN_LUT=7513}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv16_9C40 : STD_LOGIC_VECTOR (15 downto 0) := "1001110001000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_C8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv22_2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_const_lv22_3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000011";
    constant ap_const_lv22_320 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001100100000";
    constant ap_const_lv22_321 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001100100001";
    constant ap_const_lv22_322 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001100100010";
    constant ap_const_lv22_323 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001100100011";
    constant ap_const_lv22_640 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000011001000000";
    constant ap_const_lv22_641 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000011001000001";
    constant ap_const_lv22_642 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000011001000010";
    constant ap_const_lv22_643 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000011001000011";
    constant ap_const_lv22_960 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100101100000";
    constant ap_const_lv22_961 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100101100001";
    constant ap_const_lv22_962 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100101100010";
    constant ap_const_lv22_963 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100101100011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mark_idx_1_fu_699_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mark_idx_1_reg_1153 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal idx_urem_fu_717_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal idx_urem_reg_1158 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal base_idx_fu_763_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal base_idx_reg_1163 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_6_fu_773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1181 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_1191 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_1206 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_12_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_1216 : STD_LOGIC_VECTOR (63 downto 0);
    signal mark_load_reg_1226 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_reg_1231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_16_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_1241 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_1251 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_20_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_reg_1261 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_1271 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_24_fu_901_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_1281 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_reg_1291 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_28_fu_929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_reg_1301 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_reg_1311 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_32_fu_957_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_reg_1321 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_971_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_reg_1331 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_36_fu_985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_reg_1341 : STD_LOGIC_VECTOR (63 downto 0);
    signal indata_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal indata_ce0 : STD_LOGIC;
    signal indata_we0 : STD_LOGIC;
    signal indata_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal indata_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indata_ce1 : STD_LOGIC;
    signal indata_we1 : STD_LOGIC;
    signal outdata_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal outdata_ce0 : STD_LOGIC;
    signal outdata_we0 : STD_LOGIC;
    signal outdata_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal outdata_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal outdata_ce1 : STD_LOGIC;
    signal outdata_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_add_watermark_fu_682_ap_start : STD_LOGIC;
    signal grp_add_watermark_fu_682_ap_done : STD_LOGIC;
    signal grp_add_watermark_fu_682_ap_idle : STD_LOGIC;
    signal grp_add_watermark_fu_682_ap_ready : STD_LOGIC;
    signal grp_add_watermark_fu_682_indata_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_add_watermark_fu_682_indata_ce0 : STD_LOGIC;
    signal grp_add_watermark_fu_682_outdata_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_add_watermark_fu_682_outdata_ce0 : STD_LOGIC;
    signal grp_add_watermark_fu_682_outdata_we0 : STD_LOGIC;
    signal grp_add_watermark_fu_682_outdata_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mark_idx_reg_660 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_50_reg_671 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_grp_add_watermark_fu_682_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_37_fu_789_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal next_urem_fu_705_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_49_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mark_idx_cast_fu_689_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_cast_fu_725_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_729_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_38_fu_735_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_51_fu_747_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_751_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_cast_cast_fu_759_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_4_cast_fu_743_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal base_idx_cast_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_778_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_794_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_9_cast_fu_799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_808_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_11_cast_fu_813_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_822_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_13_cast_fu_827_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_836_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_15_cast_fu_841_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_850_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_17_cast_fu_855_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_864_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_19_cast_fu_869_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_878_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_21_cast_fu_883_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_892_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_23_cast_fu_897_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_906_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_25_cast_fu_911_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_920_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_27_cast_fu_925_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_934_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_29_cast_fu_939_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_948_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_31_cast_fu_953_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_962_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_33_cast_fu_967_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_976_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_35_cast_fu_981_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);

    component add_watermark IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        indata_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        indata_ce0 : OUT STD_LOGIC;
        indata_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        mark : IN STD_LOGIC_VECTOR (7 downto 0);
        outdata_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        outdata_ce0 : OUT STD_LOGIC;
        outdata_we0 : OUT STD_LOGIC;
        outdata_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component add_watermark_bufg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component img_proc_outdata IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    indata_U : component add_watermark_bufg8j
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => indata_address0,
        ce0 => indata_ce0,
        we0 => indata_we0,
        d0 => img_q0,
        q0 => indata_q0,
        address1 => indata_address1,
        ce1 => indata_ce1,
        we1 => indata_we1,
        d1 => img_q1);

    outdata_U : component img_proc_outdata
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => outdata_address0,
        ce0 => outdata_ce0,
        we0 => outdata_we0,
        d0 => grp_add_watermark_fu_682_outdata_d0,
        q0 => outdata_q0,
        address1 => outdata_address1,
        ce1 => outdata_ce1,
        q1 => outdata_q1);

    grp_add_watermark_fu_682 : component add_watermark
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_add_watermark_fu_682_ap_start,
        ap_done => grp_add_watermark_fu_682_ap_done,
        ap_idle => grp_add_watermark_fu_682_ap_idle,
        ap_ready => grp_add_watermark_fu_682_ap_ready,
        indata_address0 => grp_add_watermark_fu_682_indata_address0,
        indata_ce0 => grp_add_watermark_fu_682_indata_ce0,
        indata_q0 => indata_q0,
        mark => mark_load_reg_1226,
        outdata_address0 => grp_add_watermark_fu_682_outdata_address0,
        outdata_ce0 => grp_add_watermark_fu_682_outdata_ce0,
        outdata_we0 => grp_add_watermark_fu_682_outdata_we0,
        outdata_d0 => grp_add_watermark_fu_682_outdata_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_add_watermark_fu_682_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_add_watermark_fu_682_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_reg_grp_add_watermark_fu_682_ap_start <= ap_const_logic_1;
                elsif ((grp_add_watermark_fu_682_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_add_watermark_fu_682_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    mark_idx_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                mark_idx_reg_660 <= mark_idx_1_reg_1153;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mark_idx_reg_660 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_50_reg_671_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                tmp_50_reg_671 <= idx_urem_reg_1158;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_50_reg_671 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_693_p2 = ap_const_lv1_0))) then
                    base_idx_reg_1163(21 downto 2) <= base_idx_fu_763_p2(21 downto 2);
                idx_urem_reg_1158 <= idx_urem_fu_717_p3;
                    tmp_6_reg_1181(31 downto 2) <= tmp_6_fu_773_p1(31 downto 2);
                    tmp_8_reg_1191(31 downto 2) <= tmp_8_fu_784_p1(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mark_idx_1_reg_1153 <= mark_idx_1_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                mark_load_reg_1226 <= mark_q0;
                    tmp_10_reg_1206(31 downto 2) <= tmp_10_fu_803_p1(31 downto 2);
                    tmp_12_reg_1216(31 downto 2) <= tmp_12_fu_817_p1(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp_14_reg_1231(31 downto 2) <= tmp_14_fu_831_p1(31 downto 2);
                    tmp_16_reg_1241(31 downto 2) <= tmp_16_fu_845_p1(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    tmp_18_reg_1251(31 downto 2) <= tmp_18_fu_859_p1(31 downto 2);
                    tmp_20_reg_1261(31 downto 2) <= tmp_20_fu_873_p1(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    tmp_22_reg_1271(31 downto 2) <= tmp_22_fu_887_p1(31 downto 2);
                    tmp_24_reg_1281(31 downto 2) <= tmp_24_fu_901_p1(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    tmp_26_reg_1291(31 downto 2) <= tmp_26_fu_915_p1(31 downto 2);
                    tmp_28_reg_1301(31 downto 2) <= tmp_28_fu_929_p1(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    tmp_30_reg_1311(31 downto 2) <= tmp_30_fu_943_p1(31 downto 2);
                    tmp_32_reg_1321(31 downto 2) <= tmp_32_fu_957_p1(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    tmp_34_reg_1331(31 downto 2) <= tmp_34_fu_971_p1(31 downto 2);
                    tmp_36_reg_1341(31 downto 2) <= tmp_36_fu_985_p1(31 downto 2);
            end if;
        end if;
    end process;
    base_idx_reg_1163(1 downto 0) <= "00";
    tmp_6_reg_1181(1 downto 0) <= "00";
    tmp_6_reg_1181(63 downto 32) <= "00000000000000000000000000000000";
    tmp_8_reg_1191(1 downto 0) <= "01";
    tmp_8_reg_1191(63 downto 32) <= "00000000000000000000000000000000";
    tmp_10_reg_1206(1 downto 0) <= "10";
    tmp_10_reg_1206(63 downto 32) <= "00000000000000000000000000000000";
    tmp_12_reg_1216(1 downto 0) <= "11";
    tmp_12_reg_1216(63 downto 32) <= "00000000000000000000000000000000";
    tmp_14_reg_1231(1 downto 0) <= "00";
    tmp_14_reg_1231(63 downto 32) <= "00000000000000000000000000000000";
    tmp_16_reg_1241(1 downto 0) <= "01";
    tmp_16_reg_1241(63 downto 32) <= "00000000000000000000000000000000";
    tmp_18_reg_1251(1 downto 0) <= "10";
    tmp_18_reg_1251(63 downto 32) <= "00000000000000000000000000000000";
    tmp_20_reg_1261(1 downto 0) <= "11";
    tmp_20_reg_1261(63 downto 32) <= "00000000000000000000000000000000";
    tmp_22_reg_1271(1 downto 0) <= "00";
    tmp_22_reg_1271(63 downto 32) <= "00000000000000000000000000000000";
    tmp_24_reg_1281(1 downto 0) <= "01";
    tmp_24_reg_1281(63 downto 32) <= "00000000000000000000000000000000";
    tmp_26_reg_1291(1 downto 0) <= "10";
    tmp_26_reg_1291(63 downto 32) <= "00000000000000000000000000000000";
    tmp_28_reg_1301(1 downto 0) <= "11";
    tmp_28_reg_1301(63 downto 32) <= "00000000000000000000000000000000";
    tmp_30_reg_1311(1 downto 0) <= "00";
    tmp_30_reg_1311(63 downto 32) <= "00000000000000000000000000000000";
    tmp_32_reg_1321(1 downto 0) <= "01";
    tmp_32_reg_1321(63 downto 32) <= "00000000000000000000000000000000";
    tmp_34_reg_1331(1 downto 0) <= "10";
    tmp_34_reg_1331(63 downto 32) <= "00000000000000000000000000000000";
    tmp_36_reg_1341(1 downto 0) <= "11";
    tmp_36_reg_1341(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_693_p2, grp_add_watermark_fu_682_ap_done, ap_CS_fsm_state12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_693_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_add_watermark_fu_682_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_693_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_693_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_693_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_693_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        base_idx_cast_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(base_idx_fu_763_p2),32));

    base_idx_fu_763_p2 <= std_logic_vector(unsigned(tmp_5_cast_cast_fu_759_p1) + unsigned(tmp_4_cast_fu_743_p1));
    grp_add_watermark_fu_682_ap_start <= ap_reg_grp_add_watermark_fu_682_ap_start;
    idx_urem_fu_717_p3 <= 
        next_urem_fu_705_p2 when (tmp_49_fu_711_p2(0) = '1') else 
        ap_const_lv16_0;

    img_address0_assign_proc : process(ap_CS_fsm_state2, tmp_6_fu_773_p1, tmp_10_fu_803_p1, ap_CS_fsm_state3, tmp_14_fu_831_p1, ap_CS_fsm_state4, tmp_18_fu_859_p1, ap_CS_fsm_state5, tmp_22_fu_887_p1, ap_CS_fsm_state6, tmp_26_fu_915_p1, ap_CS_fsm_state7, tmp_30_fu_943_p1, ap_CS_fsm_state8, tmp_34_fu_971_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            img_address0 <= tmp_34_fu_971_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_address0 <= tmp_30_fu_943_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_address0 <= tmp_26_fu_915_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_address0 <= tmp_22_fu_887_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            img_address0 <= tmp_18_fu_859_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_address0 <= tmp_14_fu_831_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_address0 <= tmp_10_fu_803_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_address0 <= tmp_6_fu_773_p1(20 - 1 downto 0);
        else 
            img_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    img_address1_assign_proc : process(ap_CS_fsm_state2, tmp_8_fu_784_p1, ap_CS_fsm_state3, tmp_12_fu_817_p1, ap_CS_fsm_state4, tmp_16_fu_845_p1, ap_CS_fsm_state5, tmp_20_fu_873_p1, ap_CS_fsm_state6, tmp_24_fu_901_p1, ap_CS_fsm_state7, tmp_28_fu_929_p1, ap_CS_fsm_state8, tmp_32_fu_957_p1, ap_CS_fsm_state9, tmp_36_fu_985_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            img_address1 <= tmp_36_fu_985_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_address1 <= tmp_32_fu_957_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_address1 <= tmp_28_fu_929_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_address1 <= tmp_24_fu_901_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            img_address1 <= tmp_20_fu_873_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_address1 <= tmp_16_fu_845_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_address1 <= tmp_12_fu_817_p1(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_address1 <= tmp_8_fu_784_p1(20 - 1 downto 0);
        else 
            img_address1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    img_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            img_ce0 <= ap_const_logic_1;
        else 
            img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            img_ce1 <= ap_const_logic_1;
        else 
            img_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    indata_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_add_watermark_fu_682_indata_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            indata_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            indata_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            indata_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            indata_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            indata_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            indata_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            indata_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            indata_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            indata_address0 <= grp_add_watermark_fu_682_indata_address0;
        else 
            indata_address0 <= "XXXX";
        end if; 
    end process;


    indata_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            indata_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            indata_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            indata_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            indata_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            indata_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            indata_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            indata_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            indata_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            indata_address1 <= "XXXX";
        end if; 
    end process;


    indata_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, grp_add_watermark_fu_682_indata_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            indata_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            indata_ce0 <= grp_add_watermark_fu_682_indata_ce0;
        else 
            indata_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    indata_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            indata_ce1 <= ap_const_logic_1;
        else 
            indata_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    indata_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            indata_we0 <= ap_const_logic_1;
        else 
            indata_we0 <= ap_const_logic_0;
        end if; 
    end process;


    indata_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            indata_we1 <= ap_const_logic_1;
        else 
            indata_we1 <= ap_const_logic_0;
        end if; 
    end process;

    mark_address0 <= tmp_37_fu_789_p1(16 - 1 downto 0);

    mark_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mark_ce0 <= ap_const_logic_1;
        else 
            mark_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mark_idx_1_fu_699_p2 <= std_logic_vector(unsigned(mark_idx_reg_660) + unsigned(ap_const_lv16_1));
    mark_idx_cast_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mark_idx_reg_660),17));
    next_urem_fu_705_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(tmp_50_reg_671));

    out_r_address0_assign_proc : process(tmp_6_reg_1181, tmp_10_reg_1206, tmp_14_reg_1231, tmp_18_reg_1251, tmp_22_reg_1271, tmp_26_reg_1291, tmp_30_reg_1311, tmp_34_reg_1331, ap_CS_fsm_state21, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            out_r_address0 <= tmp_34_reg_1331(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            out_r_address0 <= tmp_30_reg_1311(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_address0 <= tmp_26_reg_1291(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            out_r_address0 <= tmp_22_reg_1271(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_r_address0 <= tmp_18_reg_1251(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            out_r_address0 <= tmp_14_reg_1231(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_address0 <= tmp_10_reg_1206(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_r_address0 <= tmp_6_reg_1181(20 - 1 downto 0);
        else 
            out_r_address0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_address1_assign_proc : process(tmp_8_reg_1191, tmp_12_reg_1216, tmp_16_reg_1241, tmp_20_reg_1261, tmp_24_reg_1281, tmp_28_reg_1301, tmp_32_reg_1321, tmp_36_reg_1341, ap_CS_fsm_state21, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            out_r_address1 <= tmp_36_reg_1341(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            out_r_address1 <= tmp_32_reg_1321(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            out_r_address1 <= tmp_28_reg_1301(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            out_r_address1 <= tmp_24_reg_1281(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            out_r_address1 <= tmp_20_reg_1261(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            out_r_address1 <= tmp_16_reg_1241(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_r_address1 <= tmp_12_reg_1216(20 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            out_r_address1 <= tmp_8_reg_1191(20 - 1 downto 0);
        else 
            out_r_address1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_ce1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            out_r_ce1 <= ap_const_logic_1;
        else 
            out_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= outdata_q0;
    out_r_d1 <= outdata_q1;

    out_r_we0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_r_we1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            out_r_we1 <= ap_const_logic_1;
        else 
            out_r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    outdata_address0_assign_proc : process(grp_add_watermark_fu_682_outdata_address0, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            outdata_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            outdata_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            outdata_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            outdata_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            outdata_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            outdata_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            outdata_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            outdata_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            outdata_address0 <= grp_add_watermark_fu_682_outdata_address0;
        else 
            outdata_address0 <= "XXXX";
        end if; 
    end process;


    outdata_address1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            outdata_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            outdata_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            outdata_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            outdata_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            outdata_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            outdata_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            outdata_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            outdata_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            outdata_address1 <= "XXXX";
        end if; 
    end process;


    outdata_ce0_assign_proc : process(grp_add_watermark_fu_682_outdata_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            outdata_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            outdata_ce0 <= grp_add_watermark_fu_682_outdata_ce0;
        else 
            outdata_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    outdata_ce1_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            outdata_ce1 <= ap_const_logic_1;
        else 
            outdata_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    outdata_we0_assign_proc : process(grp_add_watermark_fu_682_outdata_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            outdata_we0 <= grp_add_watermark_fu_682_outdata_we0;
        else 
            outdata_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_cast_fu_799_p1),64));
        tmp_11_cast_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_808_p2),32));

    tmp_11_fu_808_p2 <= (base_idx_reg_1163 or ap_const_lv22_3);
    tmp_12_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_cast_fu_813_p1),64));
        tmp_13_cast_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_822_p2),32));

    tmp_13_fu_822_p2 <= std_logic_vector(unsigned(ap_const_lv22_320) + unsigned(base_idx_reg_1163));
    tmp_14_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_cast_fu_827_p1),64));
        tmp_15_cast_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_836_p2),32));

    tmp_15_fu_836_p2 <= std_logic_vector(unsigned(ap_const_lv22_321) + unsigned(base_idx_reg_1163));
    tmp_16_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_cast_fu_841_p1),64));
        tmp_17_cast_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_850_p2),32));

    tmp_17_fu_850_p2 <= std_logic_vector(unsigned(ap_const_lv22_322) + unsigned(base_idx_reg_1163));
    tmp_18_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_cast_fu_855_p1),64));
        tmp_19_cast_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_864_p2),32));

    tmp_19_fu_864_p2 <= std_logic_vector(unsigned(ap_const_lv22_323) + unsigned(base_idx_reg_1163));
    tmp_20_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_cast_fu_869_p1),64));
        tmp_21_cast_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_878_p2),32));

    tmp_21_fu_878_p2 <= std_logic_vector(unsigned(ap_const_lv22_640) + unsigned(base_idx_reg_1163));
    tmp_22_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_cast_fu_883_p1),64));
        tmp_23_cast_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_892_p2),32));

    tmp_23_fu_892_p2 <= std_logic_vector(unsigned(ap_const_lv22_641) + unsigned(base_idx_reg_1163));
    tmp_24_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_cast_fu_897_p1),64));
        tmp_25_cast_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_fu_906_p2),32));

    tmp_25_fu_906_p2 <= std_logic_vector(unsigned(ap_const_lv22_642) + unsigned(base_idx_reg_1163));
    tmp_26_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_cast_fu_911_p1),64));
        tmp_27_cast_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_fu_920_p2),32));

    tmp_27_fu_920_p2 <= std_logic_vector(unsigned(ap_const_lv22_643) + unsigned(base_idx_reg_1163));
    tmp_28_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_cast_fu_925_p1),64));
        tmp_29_cast_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_fu_934_p2),32));

    tmp_29_fu_934_p2 <= std_logic_vector(unsigned(ap_const_lv22_960) + unsigned(base_idx_reg_1163));
    tmp_2_cast_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_reg_671),17));
    tmp_30_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_cast_fu_939_p1),64));
        tmp_31_cast_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_948_p2),32));

    tmp_31_fu_948_p2 <= std_logic_vector(unsigned(ap_const_lv22_961) + unsigned(base_idx_reg_1163));
    tmp_32_fu_957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_cast_fu_953_p1),64));
        tmp_33_cast_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_fu_962_p2),32));

    tmp_33_fu_962_p2 <= std_logic_vector(unsigned(ap_const_lv22_962) + unsigned(base_idx_reg_1163));
    tmp_34_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_cast_fu_967_p1),64));
        tmp_35_cast_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_fu_976_p2),32));

    tmp_35_fu_976_p2 <= std_logic_vector(unsigned(ap_const_lv22_963) + unsigned(base_idx_reg_1163));
    tmp_36_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_cast_fu_981_p1),64));
    tmp_37_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mark_idx_reg_660),64));
    tmp_38_fu_735_p3 <= (tmp_s_fu_729_p2 & ap_const_lv4_0);
    tmp_49_fu_711_p2 <= "1" when (unsigned(next_urem_fu_705_p2) < unsigned(ap_const_lv16_C8)) else "0";
        tmp_4_cast_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_38_fu_735_p3),22));

    tmp_51_fu_747_p1 <= tmp_50_reg_671(8 - 1 downto 0);
    tmp_5_cast_cast_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_751_p3),22));
    tmp_5_fu_751_p3 <= (tmp_51_fu_747_p1 & ap_const_lv2_0);
    tmp_6_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(base_idx_cast_fu_769_p1),64));
    tmp_7_fu_778_p2 <= (base_idx_cast_fu_769_p1 or ap_const_lv32_1);
    tmp_8_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_778_p2),64));
        tmp_9_cast_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_794_p2),32));

    tmp_9_fu_794_p2 <= (base_idx_reg_1163 or ap_const_lv22_2);
    tmp_fu_693_p2 <= "1" when (mark_idx_reg_660 = ap_const_lv16_9C40) else "0";
    tmp_s_fu_729_p2 <= std_logic_vector(unsigned(mark_idx_cast_fu_689_p1) - unsigned(tmp_2_cast_fu_725_p1));
end behav;
