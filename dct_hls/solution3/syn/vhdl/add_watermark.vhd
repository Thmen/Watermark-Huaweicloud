-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_watermark is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indata_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    indata_ce0 : OUT STD_LOGIC;
    indata_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    mark : IN STD_LOGIC_VECTOR (7 downto 0);
    outdata_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    outdata_ce0 : OUT STD_LOGIC;
    outdata_we0 : OUT STD_LOGIC;
    outdata_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of add_watermark is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv20_A : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_fu_203_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_497 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_fu_213_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_i_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_125_cast_fu_229_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_125_cast_reg_507 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_248_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_523 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_i_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_268_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_97_reg_533 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_0_0_V_reg_538 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_quantificat_fu_186_ap_done : STD_LOGIC;
    signal buf_temp_qft_0_1_V_reg_543 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_2_V_reg_548 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_0_V_reg_553 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_1_V_reg_558 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_3_V_reg_563 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_0_V_reg_568 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_2_V_reg_573 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_3_V_reg_578 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_1_V_reg_583 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_2_V_reg_588 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_3_V_reg_593 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_0_V_2_fu_382_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_0_V_2_reg_598 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_1_V_2_fu_390_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_1_V_2_reg_603 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_2_V_2_fu_398_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_2_V_2_reg_608 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_3_V_2_fu_406_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_3_V_2_reg_613 : STD_LOGIC_VECTOR (19 downto 0);
    signal r_2_fu_420_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_2_reg_621 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_127_cast_fu_434_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_127_cast_reg_626 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_i1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i1_fu_442_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_i1_reg_631 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_1_fu_460_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_1_reg_639 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_i1_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_fu_480_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_i_reg_649 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_ce1 : STD_LOGIC;
    signal temp_we1 : STD_LOGIC;
    signal temp_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_2d_in_ce0 : STD_LOGIC;
    signal buf_2d_in_we0 : STD_LOGIC;
    signal buf_2d_in_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_ce1 : STD_LOGIC;
    signal buf_2d_in_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_temp_dct_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_temp_dct_ce0 : STD_LOGIC;
    signal buf_temp_dct_we0 : STD_LOGIC;
    signal buf_temp_dct_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_temp_dct_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_temp_dct_ce1 : STD_LOGIC;
    signal buf_temp_dct_we1 : STD_LOGIC;
    signal buf_temp_dct_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_2d_out_ce0 : STD_LOGIC;
    signal buf_2d_out_we0 : STD_LOGIC;
    signal buf_2d_out_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_2d_out_ce1 : STD_LOGIC;
    signal buf_2d_out_we1 : STD_LOGIC;
    signal grp_integer_idct_fu_165_ap_start : STD_LOGIC;
    signal grp_integer_idct_fu_165_ap_done : STD_LOGIC;
    signal grp_integer_idct_fu_165_ap_idle : STD_LOGIC;
    signal grp_integer_idct_fu_165_ap_ready : STD_LOGIC;
    signal grp_integer_idct_fu_165_out_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_integer_idct_fu_165_out_r_ce0 : STD_LOGIC;
    signal grp_integer_idct_fu_165_out_r_we0 : STD_LOGIC;
    signal grp_integer_idct_fu_165_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_integer_idct_fu_165_out_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_integer_idct_fu_165_out_r_ce1 : STD_LOGIC;
    signal grp_integer_idct_fu_165_out_r_we1 : STD_LOGIC;
    signal grp_integer_idct_fu_165_out_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_quantificat_fu_186_ap_start : STD_LOGIC;
    signal grp_quantificat_fu_186_ap_idle : STD_LOGIC;
    signal grp_quantificat_fu_186_ap_ready : STD_LOGIC;
    signal grp_quantificat_fu_186_qsrc_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_quantificat_fu_186_qsrc_ce0 : STD_LOGIC;
    signal grp_quantificat_fu_186_qsrc_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_quantificat_fu_186_qsrc_ce1 : STD_LOGIC;
    signal grp_quantificat_fu_186_ap_return_0 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_4 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_5 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_6 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_7 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_8 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_9 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_10 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_11 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_12 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_13 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_14 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_quantificat_fu_186_ap_return_15 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_dct_step_fu_191_ap_start : STD_LOGIC;
    signal grp_dct_step_fu_191_ap_done : STD_LOGIC;
    signal grp_dct_step_fu_191_ap_idle : STD_LOGIC;
    signal grp_dct_step_fu_191_ap_ready : STD_LOGIC;
    signal grp_dct_step_fu_191_src_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_step_fu_191_src_ce0 : STD_LOGIC;
    signal grp_dct_step_fu_191_src_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_step_fu_191_src_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_step_fu_191_src_ce1 : STD_LOGIC;
    signal grp_dct_step_fu_191_src_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_step_fu_191_dst_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_step_fu_191_dst_ce0 : STD_LOGIC;
    signal grp_dct_step_fu_191_dst_we0 : STD_LOGIC;
    signal grp_dct_step_fu_191_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_step_fu_191_dst_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dct_step_fu_191_dst_ce1 : STD_LOGIC;
    signal grp_dct_step_fu_191_dst_we1 : STD_LOGIC;
    signal grp_dct_step_fu_191_dst_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_i_reg_121 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_i_reg_132 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_i1_reg_143 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal c_i1_reg_154 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_reg_grp_integer_idct_fu_165_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_quantificat_fu_186_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_reg_grp_dct_step_fu_191_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_i_9_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_cast_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_cast_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_i_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_115_fu_209_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_221_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_i_cast_fu_238_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_i_fu_254_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_i_cast_fu_264_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_3_0_V_1_fu_358_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_1_V_1_fu_370_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_2_V_1_fu_364_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_3_V_1_fu_376_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_96_fu_426_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_116_fu_438_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_i1_cast_fu_466_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_98_fu_470_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_i1_cast_fu_450_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component integer_idct IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_0_0_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_0_1_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_0_2_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_0_3_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_1_0_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_1_1_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_1_2_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_1_3_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_2_0_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_2_1_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_2_2_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_2_3_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_3_0_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_3_1_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_3_2_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_3_3_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_we1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component quantificat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        qsrc_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        qsrc_ce0 : OUT STD_LOGIC;
        qsrc_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        qsrc_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        qsrc_ce1 : OUT STD_LOGIC;
        qsrc_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (19 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component dct_step IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src_ce0 : OUT STD_LOGIC;
        src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        src_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        src_ce1 : OUT STD_LOGIC;
        src_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dst_ce1 : OUT STD_LOGIC;
        dst_we1 : OUT STD_LOGIC;
        dst_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component add_watermark_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component add_watermark_bufeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component add_watermark_bufg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    temp_U : component add_watermark_temp
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => grp_dct_step_fu_191_dst_d0,
        q0 => temp_q0,
        address1 => temp_address1,
        ce1 => temp_ce1,
        we1 => temp_we1,
        d1 => grp_dct_step_fu_191_dst_d1,
        q1 => temp_q1);

    buf_2d_in_U : component add_watermark_bufeOg
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_2d_in_address0,
        ce0 => buf_2d_in_ce0,
        we0 => buf_2d_in_we0,
        d0 => buf_2d_in_d0,
        q0 => buf_2d_in_q0,
        address1 => grp_dct_step_fu_191_src_address1,
        ce1 => buf_2d_in_ce1,
        q1 => buf_2d_in_q1);

    buf_temp_dct_U : component add_watermark_temp
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_temp_dct_address0,
        ce0 => buf_temp_dct_ce0,
        we0 => buf_temp_dct_we0,
        d0 => grp_dct_step_fu_191_dst_d0,
        q0 => buf_temp_dct_q0,
        address1 => buf_temp_dct_address1,
        ce1 => buf_temp_dct_ce1,
        we1 => buf_temp_dct_we1,
        d1 => grp_dct_step_fu_191_dst_d1,
        q1 => buf_temp_dct_q1);

    buf_2d_out_U : component add_watermark_bufg8j
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_2d_out_address0,
        ce0 => buf_2d_out_ce0,
        we0 => buf_2d_out_we0,
        d0 => grp_integer_idct_fu_165_out_r_d0,
        q0 => buf_2d_out_q0,
        address1 => grp_integer_idct_fu_165_out_r_address1,
        ce1 => buf_2d_out_ce1,
        we1 => buf_2d_out_we1,
        d1 => grp_integer_idct_fu_165_out_r_d1);

    grp_integer_idct_fu_165 : component integer_idct
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_integer_idct_fu_165_ap_start,
        ap_done => grp_integer_idct_fu_165_ap_done,
        ap_idle => grp_integer_idct_fu_165_ap_idle,
        ap_ready => grp_integer_idct_fu_165_ap_ready,
        src_0_0_V_read => buf_temp_qft_0_0_V_reg_538,
        src_0_1_V_read => buf_temp_qft_0_1_V_reg_543,
        src_0_2_V_read => buf_temp_qft_0_2_V_reg_548,
        src_0_3_V_read => buf_temp_qft_0_3_V_2_reg_613,
        src_1_0_V_read => buf_temp_qft_1_0_V_reg_553,
        src_1_1_V_read => buf_temp_qft_1_1_V_reg_558,
        src_1_2_V_read => buf_temp_qft_1_2_V_2_reg_608,
        src_1_3_V_read => buf_temp_qft_1_3_V_reg_563,
        src_2_0_V_read => buf_temp_qft_2_0_V_reg_568,
        src_2_1_V_read => buf_temp_qft_2_1_V_2_reg_603,
        src_2_2_V_read => buf_temp_qft_2_2_V_reg_573,
        src_2_3_V_read => buf_temp_qft_2_3_V_reg_578,
        src_3_0_V_read => buf_temp_qft_3_0_V_2_reg_598,
        src_3_1_V_read => buf_temp_qft_3_1_V_reg_583,
        src_3_2_V_read => buf_temp_qft_3_2_V_reg_588,
        src_3_3_V_read => buf_temp_qft_3_3_V_reg_593,
        out_r_address0 => grp_integer_idct_fu_165_out_r_address0,
        out_r_ce0 => grp_integer_idct_fu_165_out_r_ce0,
        out_r_we0 => grp_integer_idct_fu_165_out_r_we0,
        out_r_d0 => grp_integer_idct_fu_165_out_r_d0,
        out_r_address1 => grp_integer_idct_fu_165_out_r_address1,
        out_r_ce1 => grp_integer_idct_fu_165_out_r_ce1,
        out_r_we1 => grp_integer_idct_fu_165_out_r_we1,
        out_r_d1 => grp_integer_idct_fu_165_out_r_d1);

    grp_quantificat_fu_186 : component quantificat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_quantificat_fu_186_ap_start,
        ap_done => grp_quantificat_fu_186_ap_done,
        ap_idle => grp_quantificat_fu_186_ap_idle,
        ap_ready => grp_quantificat_fu_186_ap_ready,
        qsrc_address0 => grp_quantificat_fu_186_qsrc_address0,
        qsrc_ce0 => grp_quantificat_fu_186_qsrc_ce0,
        qsrc_q0 => buf_temp_dct_q0,
        qsrc_address1 => grp_quantificat_fu_186_qsrc_address1,
        qsrc_ce1 => grp_quantificat_fu_186_qsrc_ce1,
        qsrc_q1 => buf_temp_dct_q1,
        ap_return_0 => grp_quantificat_fu_186_ap_return_0,
        ap_return_1 => grp_quantificat_fu_186_ap_return_1,
        ap_return_2 => grp_quantificat_fu_186_ap_return_2,
        ap_return_3 => grp_quantificat_fu_186_ap_return_3,
        ap_return_4 => grp_quantificat_fu_186_ap_return_4,
        ap_return_5 => grp_quantificat_fu_186_ap_return_5,
        ap_return_6 => grp_quantificat_fu_186_ap_return_6,
        ap_return_7 => grp_quantificat_fu_186_ap_return_7,
        ap_return_8 => grp_quantificat_fu_186_ap_return_8,
        ap_return_9 => grp_quantificat_fu_186_ap_return_9,
        ap_return_10 => grp_quantificat_fu_186_ap_return_10,
        ap_return_11 => grp_quantificat_fu_186_ap_return_11,
        ap_return_12 => grp_quantificat_fu_186_ap_return_12,
        ap_return_13 => grp_quantificat_fu_186_ap_return_13,
        ap_return_14 => grp_quantificat_fu_186_ap_return_14,
        ap_return_15 => grp_quantificat_fu_186_ap_return_15);

    grp_dct_step_fu_191 : component dct_step
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_step_fu_191_ap_start,
        ap_done => grp_dct_step_fu_191_ap_done,
        ap_idle => grp_dct_step_fu_191_ap_idle,
        ap_ready => grp_dct_step_fu_191_ap_ready,
        src_address0 => grp_dct_step_fu_191_src_address0,
        src_ce0 => grp_dct_step_fu_191_src_ce0,
        src_q0 => grp_dct_step_fu_191_src_q0,
        src_address1 => grp_dct_step_fu_191_src_address1,
        src_ce1 => grp_dct_step_fu_191_src_ce1,
        src_q1 => grp_dct_step_fu_191_src_q1,
        dst_address0 => grp_dct_step_fu_191_dst_address0,
        dst_ce0 => grp_dct_step_fu_191_dst_ce0,
        dst_we0 => grp_dct_step_fu_191_dst_we0,
        dst_d0 => grp_dct_step_fu_191_dst_d0,
        dst_address1 => grp_dct_step_fu_191_dst_address1,
        dst_ce1 => grp_dct_step_fu_191_dst_ce1,
        dst_we1 => grp_dct_step_fu_191_dst_we1,
        dst_d1 => grp_dct_step_fu_191_dst_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_dct_step_fu_191_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dct_step_fu_191_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond1_i_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_grp_dct_step_fu_191_ap_start <= ap_const_logic_1;
                elsif ((grp_dct_step_fu_191_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_dct_step_fu_191_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_integer_idct_fu_165_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_integer_idct_fu_165_ap_start <= ap_const_logic_0;
            else
                if (((grp_quantificat_fu_186_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_reg_grp_integer_idct_fu_165_ap_start <= ap_const_logic_1;
                elsif ((grp_integer_idct_fu_165_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_integer_idct_fu_165_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_quantificat_fu_186_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_quantificat_fu_186_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_reg_grp_quantificat_fu_186_ap_start <= ap_const_logic_1;
                elsif ((grp_quantificat_fu_186_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_quantificat_fu_186_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_i1_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                c_i1_reg_154 <= c_1_reg_639;
            elsif (((exitcond1_i1_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                c_i1_reg_154 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    c_i_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c_i_reg_132 <= c_reg_523;
            elsif (((exitcond1_i_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_i_reg_132 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_i1_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i1_fu_454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                r_i1_reg_143 <= r_2_reg_621;
            elsif (((grp_integer_idct_fu_165_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                r_i1_reg_143 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_i_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_i_reg_121 <= r_reg_497;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_i_reg_121 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_quantificat_fu_186_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                buf_temp_qft_0_0_V_reg_538 <= grp_quantificat_fu_186_ap_return_0;
                buf_temp_qft_0_1_V_reg_543 <= grp_quantificat_fu_186_ap_return_1;
                buf_temp_qft_0_2_V_reg_548 <= grp_quantificat_fu_186_ap_return_2;
                buf_temp_qft_0_3_V_2_reg_613 <= buf_temp_qft_0_3_V_2_fu_406_p3;
                buf_temp_qft_1_0_V_reg_553 <= grp_quantificat_fu_186_ap_return_4;
                buf_temp_qft_1_1_V_reg_558 <= grp_quantificat_fu_186_ap_return_5;
                buf_temp_qft_1_2_V_2_reg_608 <= buf_temp_qft_1_2_V_2_fu_398_p3;
                buf_temp_qft_1_3_V_reg_563 <= grp_quantificat_fu_186_ap_return_7;
                buf_temp_qft_2_0_V_reg_568 <= grp_quantificat_fu_186_ap_return_8;
                buf_temp_qft_2_1_V_2_reg_603 <= buf_temp_qft_2_1_V_2_fu_390_p3;
                buf_temp_qft_2_2_V_reg_573 <= grp_quantificat_fu_186_ap_return_10;
                buf_temp_qft_2_3_V_reg_578 <= grp_quantificat_fu_186_ap_return_11;
                buf_temp_qft_3_0_V_2_reg_598 <= buf_temp_qft_3_0_V_2_fu_382_p3;
                buf_temp_qft_3_1_V_reg_583 <= grp_quantificat_fu_186_ap_return_13;
                buf_temp_qft_3_2_V_reg_588 <= grp_quantificat_fu_186_ap_return_14;
                buf_temp_qft_3_3_V_reg_593 <= grp_quantificat_fu_186_ap_return_15;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                c_1_reg_639 <= c_1_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_523 <= c_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                r_2_reg_621 <= r_2_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_497 <= r_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_125_cast_reg_507(4 downto 2) <= tmp_125_cast_fu_229_p1(4 downto 2);
                    tmp_i_reg_502(3 downto 2) <= tmp_i_fu_213_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i1_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    tmp_127_cast_reg_626(4 downto 2) <= tmp_127_cast_fu_434_p1(4 downto 2);
                    tmp_1_i1_reg_631(3 downto 2) <= tmp_1_i1_fu_442_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i1_fu_454_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                tmp_4_i_reg_649 <= tmp_4_i_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_97_reg_533 <= tmp_97_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_i_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_512 <= tmp_fu_233_p2;
            end if;
        end if;
    end process;
    tmp_i_reg_502(1 downto 0) <= "00";
    tmp_125_cast_reg_507(1 downto 0) <= "00";
    tmp_125_cast_reg_507(5) <= '0';
    tmp_127_cast_reg_626(1 downto 0) <= "00";
    tmp_127_cast_reg_626(5) <= '0';
    tmp_1_i1_reg_631(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_i_fu_197_p2, ap_CS_fsm_state3, exitcond_i_fu_242_p2, ap_CS_fsm_state9, grp_quantificat_fu_186_ap_done, ap_CS_fsm_state11, exitcond1_i1_fu_414_p2, ap_CS_fsm_state12, exitcond_i1_fu_454_p2, grp_integer_idct_fu_165_ap_done, grp_dct_step_fu_191_ap_done, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_i_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_i_fu_242_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((grp_dct_step_fu_191_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_dct_step_fu_191_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_quantificat_fu_186_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((grp_integer_idct_fu_165_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((exitcond1_i1_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((exitcond_i1_fu_454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, exitcond1_i1_fu_414_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond1_i1_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, exitcond1_i1_fu_414_p2)
    begin
        if (((exitcond1_i1_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_address0_assign_proc : process(grp_dct_step_fu_191_src_address0, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_129_cast_fu_278_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_address0 <= tmp_129_cast_fu_278_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_2d_in_address0 <= grp_dct_step_fu_191_src_address0;
        else 
            buf_2d_in_address0 <= "XXXX";
        end if; 
    end process;


    buf_2d_in_ce0_assign_proc : process(grp_dct_step_fu_191_src_ce0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_2d_in_ce0 <= grp_dct_step_fu_191_src_ce0;
        else 
            buf_2d_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_ce1_assign_proc : process(grp_dct_step_fu_191_src_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            buf_2d_in_ce1 <= grp_dct_step_fu_191_src_ce1;
        else 
            buf_2d_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_2d_in_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indata_q0),16));

    buf_2d_in_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_we0 <= ap_const_logic_1;
        else 
            buf_2d_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_address0_assign_proc : process(ap_CS_fsm_state12, grp_integer_idct_fu_165_out_r_address0, ap_CS_fsm_state10, tmp_130_cast_fu_475_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buf_2d_out_address0 <= tmp_130_cast_fu_475_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_2d_out_address0 <= grp_integer_idct_fu_165_out_r_address0;
        else 
            buf_2d_out_address0 <= "XXXX";
        end if; 
    end process;


    buf_2d_out_ce0_assign_proc : process(ap_CS_fsm_state12, grp_integer_idct_fu_165_out_r_ce0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            buf_2d_out_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_2d_out_ce0 <= grp_integer_idct_fu_165_out_r_ce0;
        else 
            buf_2d_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_ce1_assign_proc : process(grp_integer_idct_fu_165_out_r_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_2d_out_ce1 <= grp_integer_idct_fu_165_out_r_ce1;
        else 
            buf_2d_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_we0_assign_proc : process(grp_integer_idct_fu_165_out_r_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_2d_out_we0 <= grp_integer_idct_fu_165_out_r_we0;
        else 
            buf_2d_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_we1_assign_proc : process(grp_integer_idct_fu_165_out_r_we1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            buf_2d_out_we1 <= grp_integer_idct_fu_165_out_r_we1;
        else 
            buf_2d_out_we1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_temp_dct_address0_assign_proc : process(ap_CS_fsm_state9, grp_quantificat_fu_186_qsrc_address0, grp_dct_step_fu_191_dst_address0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_temp_dct_address0 <= grp_dct_step_fu_191_dst_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_temp_dct_address0 <= grp_quantificat_fu_186_qsrc_address0;
        else 
            buf_temp_dct_address0 <= "XXXX";
        end if; 
    end process;


    buf_temp_dct_address1_assign_proc : process(ap_CS_fsm_state9, grp_quantificat_fu_186_qsrc_address1, grp_dct_step_fu_191_dst_address1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_temp_dct_address1 <= grp_dct_step_fu_191_dst_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_temp_dct_address1 <= grp_quantificat_fu_186_qsrc_address1;
        else 
            buf_temp_dct_address1 <= "XXXX";
        end if; 
    end process;


    buf_temp_dct_ce0_assign_proc : process(ap_CS_fsm_state9, grp_quantificat_fu_186_qsrc_ce0, grp_dct_step_fu_191_dst_ce0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_temp_dct_ce0 <= grp_dct_step_fu_191_dst_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_temp_dct_ce0 <= grp_quantificat_fu_186_qsrc_ce0;
        else 
            buf_temp_dct_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_temp_dct_ce1_assign_proc : process(ap_CS_fsm_state9, grp_quantificat_fu_186_qsrc_ce1, grp_dct_step_fu_191_dst_ce1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_temp_dct_ce1 <= grp_dct_step_fu_191_dst_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            buf_temp_dct_ce1 <= grp_quantificat_fu_186_qsrc_ce1;
        else 
            buf_temp_dct_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_temp_dct_we0_assign_proc : process(grp_dct_step_fu_191_dst_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_temp_dct_we0 <= grp_dct_step_fu_191_dst_we0;
        else 
            buf_temp_dct_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_temp_dct_we1_assign_proc : process(grp_dct_step_fu_191_dst_we1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            buf_temp_dct_we1 <= grp_dct_step_fu_191_dst_we1;
        else 
            buf_temp_dct_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_temp_qft_0_3_V_1_fu_376_p2 <= std_logic_vector(unsigned(grp_quantificat_fu_186_ap_return_3) + unsigned(ap_const_lv20_A));
    buf_temp_qft_0_3_V_2_fu_406_p3 <= 
        grp_quantificat_fu_186_ap_return_3 when (tmp_reg_512(0) = '1') else 
        buf_temp_qft_0_3_V_1_fu_376_p2;
    buf_temp_qft_1_2_V_1_fu_364_p2 <= std_logic_vector(unsigned(grp_quantificat_fu_186_ap_return_6) + unsigned(ap_const_lv20_A));
    buf_temp_qft_1_2_V_2_fu_398_p3 <= 
        buf_temp_qft_1_2_V_1_fu_364_p2 when (tmp_reg_512(0) = '1') else 
        grp_quantificat_fu_186_ap_return_6;
    buf_temp_qft_2_1_V_1_fu_370_p2 <= std_logic_vector(unsigned(grp_quantificat_fu_186_ap_return_9) + unsigned(ap_const_lv20_A));
    buf_temp_qft_2_1_V_2_fu_390_p3 <= 
        grp_quantificat_fu_186_ap_return_9 when (tmp_reg_512(0) = '1') else 
        buf_temp_qft_2_1_V_1_fu_370_p2;
    buf_temp_qft_3_0_V_1_fu_358_p2 <= std_logic_vector(unsigned(grp_quantificat_fu_186_ap_return_12) + unsigned(ap_const_lv20_A));
    buf_temp_qft_3_0_V_2_fu_382_p3 <= 
        buf_temp_qft_3_0_V_1_fu_358_p2 when (tmp_reg_512(0) = '1') else 
        grp_quantificat_fu_186_ap_return_12;
    c_1_fu_460_p2 <= std_logic_vector(unsigned(c_i1_reg_154) + unsigned(ap_const_lv3_1));
    c_fu_248_p2 <= std_logic_vector(unsigned(c_i_reg_132) + unsigned(ap_const_lv3_1));
    c_i1_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i1_reg_154),4));
    c_i_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i_reg_132),4));
    exitcond1_i1_fu_414_p2 <= "1" when (r_i1_reg_143 = ap_const_lv3_4) else "0";
    exitcond1_i_fu_197_p2 <= "1" when (r_i_reg_121 = ap_const_lv3_4) else "0";
    exitcond_i1_fu_454_p2 <= "1" when (c_i1_reg_154 = ap_const_lv3_4) else "0";
    exitcond_i_fu_242_p2 <= "1" when (c_i_reg_132 = ap_const_lv3_4) else "0";
    grp_dct_step_fu_191_ap_start <= ap_reg_grp_dct_step_fu_191_ap_start;

    grp_dct_step_fu_191_src_q0_assign_proc : process(temp_q0, buf_2d_in_q0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_dct_step_fu_191_src_q0 <= temp_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_dct_step_fu_191_src_q0 <= buf_2d_in_q0;
        else 
            grp_dct_step_fu_191_src_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_dct_step_fu_191_src_q1_assign_proc : process(temp_q1, buf_2d_in_q1, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_dct_step_fu_191_src_q1 <= temp_q1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_dct_step_fu_191_src_q1 <= buf_2d_in_q1;
        else 
            grp_dct_step_fu_191_src_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_integer_idct_fu_165_ap_start <= ap_reg_grp_integer_idct_fu_165_ap_start;
    grp_quantificat_fu_186_ap_start <= ap_reg_grp_quantificat_fu_186_ap_start;
    indata_address0 <= tmp_i_9_fu_259_p1(4 - 1 downto 0);

    indata_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            indata_ce0 <= ap_const_logic_1;
        else 
            indata_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outdata_address0 <= tmp_5_i_fu_485_p1(4 - 1 downto 0);

    outdata_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            outdata_ce0 <= ap_const_logic_1;
        else 
            outdata_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outdata_d0 <= buf_2d_out_q0;

    outdata_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            outdata_we0 <= ap_const_logic_1;
        else 
            outdata_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_2_fu_420_p2 <= std_logic_vector(unsigned(r_i1_reg_143) + unsigned(ap_const_lv3_1));
    r_fu_203_p2 <= std_logic_vector(unsigned(r_i_reg_121) + unsigned(ap_const_lv3_1));

    temp_address0_assign_proc : process(grp_dct_step_fu_191_src_address0, grp_dct_step_fu_191_dst_address0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_address0 <= grp_dct_step_fu_191_dst_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_address0 <= grp_dct_step_fu_191_src_address0;
        else 
            temp_address0 <= "XXXX";
        end if; 
    end process;


    temp_address1_assign_proc : process(grp_dct_step_fu_191_src_address1, grp_dct_step_fu_191_dst_address1, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_address1 <= grp_dct_step_fu_191_dst_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_address1 <= grp_dct_step_fu_191_src_address1;
        else 
            temp_address1 <= "XXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(grp_dct_step_fu_191_src_ce0, grp_dct_step_fu_191_dst_ce0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_ce0 <= grp_dct_step_fu_191_dst_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_ce0 <= grp_dct_step_fu_191_src_ce0;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_ce1_assign_proc : process(grp_dct_step_fu_191_src_ce1, grp_dct_step_fu_191_dst_ce1, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_ce1 <= grp_dct_step_fu_191_dst_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_ce1 <= grp_dct_step_fu_191_src_ce1;
        else 
            temp_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we0_assign_proc : process(grp_dct_step_fu_191_dst_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_we0 <= grp_dct_step_fu_191_dst_we0;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_we1_assign_proc : process(grp_dct_step_fu_191_dst_we1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_we1 <= grp_dct_step_fu_191_dst_we1;
        else 
            temp_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_115_fu_209_p1 <= r_i_reg_121(2 - 1 downto 0);
    tmp_116_fu_438_p1 <= r_i1_reg_143(2 - 1 downto 0);
    tmp_125_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_221_p3),6));
    tmp_127_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_96_fu_426_p3),6));
    tmp_129_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_reg_533),64));
    tmp_130_cast_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_470_p2),64));
    tmp_1_i1_fu_442_p3 <= (tmp_116_fu_438_p1 & ap_const_lv2_0);
    tmp_2_i_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i_reg_132),6));
    tmp_3_i1_cast_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_i1_reg_154),6));
    tmp_4_i_fu_480_p2 <= std_logic_vector(unsigned(c_i1_cast_fu_450_p1) + unsigned(tmp_1_i1_reg_631));
    tmp_5_i_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_i_reg_649),64));
    tmp_96_fu_426_p3 <= (r_i1_reg_143 & ap_const_lv2_0);
    tmp_97_fu_268_p2 <= std_logic_vector(unsigned(tmp_125_cast_reg_507) + unsigned(tmp_2_i_cast_fu_264_p1));
    tmp_98_fu_470_p2 <= std_logic_vector(unsigned(tmp_127_cast_reg_626) + unsigned(tmp_3_i1_cast_fu_466_p1));
    tmp_9_i_fu_254_p2 <= std_logic_vector(unsigned(c_i_cast_fu_238_p1) + unsigned(tmp_i_reg_502));
    tmp_fu_233_p2 <= "1" when (mark = ap_const_lv8_0) else "0";
    tmp_i_9_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_i_fu_254_p2),64));
    tmp_i_fu_213_p3 <= (tmp_115_fu_209_p1 & ap_const_lv2_0);
    tmp_s_fu_221_p3 <= (r_i_reg_121 & ap_const_lv2_0);
end behav;
