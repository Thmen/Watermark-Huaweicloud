// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_step (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_address1,
        dst_ce1,
        dst_we1,
        dst_d1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] src_address0;
output   src_ce0;
input  [15:0] src_q0;
output  [3:0] src_address1;
output   src_ce1;
input  [15:0] src_q1;
output  [3:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [15:0] dst_d0;
output  [3:0] dst_address1;
output   dst_ce1;
output   dst_we1;
output  [15:0] dst_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] src_address0;
reg src_ce0;
reg[3:0] src_address1;
reg src_ce1;
reg[3:0] dst_address0;
reg dst_ce0;
reg dst_we0;
reg[15:0] dst_d0;
reg[3:0] dst_address1;
reg dst_ce1;
reg dst_we1;
reg[15:0] dst_d1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] reg_346;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
reg   [15:0] reg_350;
wire   [15:0] grp_fu_379_p2;
reg   [15:0] reg_385;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire   [15:0] tmp_82_fu_445_p2;
reg   [15:0] tmp_82_reg_664;
wire   [15:0] tmp_85_fu_506_p2;
reg   [15:0] tmp_85_reg_689;
wire   [15:0] tmp_90_fu_567_p2;
reg   [15:0] tmp_90_reg_714;
wire   [15:0] tmp_95_fu_628_p2;
reg   [15:0] tmp_95_reg_729;
wire    ap_CS_fsm_state10;
wire   [15:0] grp_fu_360_p2;
wire   [15:0] tmp_58_fu_414_p2;
wire   [15:0] tmp_61_fu_475_p2;
wire   [15:0] tmp_64_fu_536_p2;
wire   [15:0] tmp_67_fu_597_p2;
wire   [15:0] grp_fu_340_p2;
wire   [15:0] grp_fu_354_p2;
wire   [15:0] grp_fu_367_p2;
wire   [15:0] grp_fu_373_p2;
wire   [15:0] tmp_fu_390_p2;
wire   [15:0] tmp_56_fu_402_p2;
wire   [15:0] tmp_57_fu_408_p2;
wire   [15:0] tmp_88_fu_396_p2;
wire   [15:0] tmp_104_fu_421_p2;
wire   [15:0] tmp_80_fu_433_p2;
wire   [15:0] tmp_108_fu_427_p2;
wire   [15:0] tmp_81_fu_439_p2;
wire   [15:0] tmp_89_fu_451_p2;
wire   [15:0] tmp_59_fu_463_p2;
wire   [15:0] tmp_60_fu_469_p2;
wire   [15:0] tmp_93_fu_457_p2;
wire   [15:0] tmp_109_fu_482_p2;
wire   [15:0] tmp_83_fu_494_p2;
wire   [15:0] tmp_110_fu_488_p2;
wire   [15:0] tmp_84_fu_500_p2;
wire   [15:0] tmp_94_fu_512_p2;
wire   [15:0] tmp_62_fu_524_p2;
wire   [15:0] tmp_63_fu_530_p2;
wire   [15:0] tmp_98_fu_518_p2;
wire   [15:0] tmp_111_fu_543_p2;
wire   [15:0] tmp_86_fu_555_p2;
wire   [15:0] tmp_112_fu_549_p2;
wire   [15:0] tmp_87_fu_561_p2;
wire   [15:0] tmp_99_fu_573_p2;
wire   [15:0] tmp_65_fu_585_p2;
wire   [15:0] tmp_66_fu_591_p2;
wire   [15:0] tmp_103_fu_579_p2;
wire   [15:0] tmp_113_fu_604_p2;
wire   [15:0] tmp_91_fu_616_p2;
wire   [15:0] tmp_114_fu_610_p2;
wire   [15:0] tmp_92_fu_622_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_346 <= src_q0;
        reg_350 <= src_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_385 <= grp_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_82_reg_664 <= tmp_82_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_85_reg_689 <= tmp_85_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_90_reg_714 <= tmp_90_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_95_reg_729 <= tmp_95_fu_628_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dst_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dst_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dst_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dst_address0 = 64'd0;
    end else begin
        dst_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dst_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dst_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dst_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dst_address1 = 64'd1;
    end else begin
        dst_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        dst_ce0 = 1'b1;
    end else begin
        dst_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        dst_ce1 = 1'b1;
    end else begin
        dst_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        dst_d0 = reg_385;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        dst_d0 = grp_fu_360_p2;
    end else begin
        dst_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dst_d1 = tmp_95_reg_729;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dst_d1 = tmp_67_fu_597_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_d1 = tmp_90_reg_714;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dst_d1 = tmp_64_fu_536_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dst_d1 = tmp_85_reg_689;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dst_d1 = tmp_61_fu_475_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dst_d1 = tmp_82_reg_664;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dst_d1 = tmp_58_fu_414_p2;
    end else begin
        dst_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        dst_we0 = 1'b1;
    end else begin
        dst_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        dst_we1 = 1'b1;
    end else begin
        dst_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        src_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        src_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        src_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        src_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        src_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        src_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        src_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        src_address0 = 64'd0;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        src_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        src_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        src_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        src_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        src_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        src_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        src_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        src_address1 = 64'd4;
    end else begin
        src_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_340_p2 = (src_q0 + src_q1);

assign grp_fu_354_p2 = (reg_350 + reg_346);

assign grp_fu_360_p2 = (grp_fu_340_p2 + grp_fu_354_p2);

assign grp_fu_367_p2 = (reg_346 - reg_350);

assign grp_fu_373_p2 = (grp_fu_367_p2 - src_q0);

assign grp_fu_379_p2 = (src_q1 + grp_fu_373_p2);

assign tmp_103_fu_579_p2 = src_q1 << 16'd1;

assign tmp_104_fu_421_p2 = reg_350 << 16'd1;

assign tmp_108_fu_427_p2 = src_q0 << 16'd1;

assign tmp_109_fu_482_p2 = reg_350 << 16'd1;

assign tmp_110_fu_488_p2 = src_q0 << 16'd1;

assign tmp_111_fu_543_p2 = reg_350 << 16'd1;

assign tmp_112_fu_549_p2 = src_q0 << 16'd1;

assign tmp_113_fu_604_p2 = reg_350 << 16'd1;

assign tmp_114_fu_610_p2 = src_q0 << 16'd1;

assign tmp_56_fu_402_p2 = (reg_350 + tmp_fu_390_p2);

assign tmp_57_fu_408_p2 = (tmp_56_fu_402_p2 - src_q0);

assign tmp_58_fu_414_p2 = (tmp_57_fu_408_p2 - tmp_88_fu_396_p2);

assign tmp_59_fu_463_p2 = (reg_350 + tmp_89_fu_451_p2);

assign tmp_60_fu_469_p2 = (tmp_59_fu_463_p2 - src_q0);

assign tmp_61_fu_475_p2 = (tmp_60_fu_469_p2 - tmp_93_fu_457_p2);

assign tmp_62_fu_524_p2 = (reg_350 + tmp_94_fu_512_p2);

assign tmp_63_fu_530_p2 = (tmp_62_fu_524_p2 - src_q0);

assign tmp_64_fu_536_p2 = (tmp_63_fu_530_p2 - tmp_98_fu_518_p2);

assign tmp_65_fu_585_p2 = (reg_350 + tmp_99_fu_573_p2);

assign tmp_66_fu_591_p2 = (tmp_65_fu_585_p2 - src_q0);

assign tmp_67_fu_597_p2 = (tmp_66_fu_591_p2 - tmp_103_fu_579_p2);

assign tmp_80_fu_433_p2 = (reg_346 - tmp_104_fu_421_p2);

assign tmp_81_fu_439_p2 = (tmp_80_fu_433_p2 + tmp_108_fu_427_p2);

assign tmp_82_fu_445_p2 = (tmp_81_fu_439_p2 - src_q1);

assign tmp_83_fu_494_p2 = (reg_346 - tmp_109_fu_482_p2);

assign tmp_84_fu_500_p2 = (tmp_83_fu_494_p2 + tmp_110_fu_488_p2);

assign tmp_85_fu_506_p2 = (tmp_84_fu_500_p2 - src_q1);

assign tmp_86_fu_555_p2 = (reg_346 - tmp_111_fu_543_p2);

assign tmp_87_fu_561_p2 = (tmp_86_fu_555_p2 + tmp_112_fu_549_p2);

assign tmp_88_fu_396_p2 = src_q1 << 16'd1;

assign tmp_89_fu_451_p2 = reg_346 << 16'd1;

assign tmp_90_fu_567_p2 = (tmp_87_fu_561_p2 - src_q1);

assign tmp_91_fu_616_p2 = (reg_346 - tmp_113_fu_604_p2);

assign tmp_92_fu_622_p2 = (tmp_91_fu_616_p2 + tmp_114_fu_610_p2);

assign tmp_93_fu_457_p2 = src_q1 << 16'd1;

assign tmp_94_fu_512_p2 = reg_346 << 16'd1;

assign tmp_95_fu_628_p2 = (tmp_92_fu_622_p2 - src_q1);

assign tmp_98_fu_518_p2 = src_q1 << 16'd1;

assign tmp_99_fu_573_p2 = reg_346 << 16'd1;

assign tmp_fu_390_p2 = reg_346 << 16'd1;

endmodule //dct_step
