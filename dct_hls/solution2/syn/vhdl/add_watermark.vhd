-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_watermark is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indata_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    indata_ce0 : OUT STD_LOGIC;
    indata_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    indata_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    indata_ce1 : OUT STD_LOGIC;
    indata_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    outdata_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    outdata_ce0 : OUT STD_LOGIC;
    outdata_we0 : OUT STD_LOGIC;
    outdata_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    outdata_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    outdata_ce1 : OUT STD_LOGIC;
    outdata_we1 : OUT STD_LOGIC;
    outdata_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    temp_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    temp_ce0 : OUT STD_LOGIC;
    temp_we0 : OUT STD_LOGIC;
    temp_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    temp_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    temp_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    temp_ce1 : OUT STD_LOGIC;
    temp_we1 : OUT STD_LOGIC;
    temp_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    temp_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    temp1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    temp1_ce0 : OUT STD_LOGIC;
    temp1_we0 : OUT STD_LOGIC;
    temp1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    temp1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    temp1_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    temp1_ce1 : OUT STD_LOGIC;
    temp1_we1 : OUT STD_LOGIC;
    temp1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    temp1_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of add_watermark is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "add_watermark,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.253000,HLS_SYN_LAT=24,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=16,HLS_SYN_FF=679,HLS_SYN_LUT=6546}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal qft_coeff_table_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal qft_coeff_table_ce0 : STD_LOGIC;
    signal qft_coeff_table_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal qft_coeff_table_load_reg_685 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal qft_coeff_table_load_1_reg_690 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal qft_coeff_table_load_2_reg_695 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal qft_coeff_table_load_3_reg_700 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal qft_coeff_table_load_4_reg_705 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal qft_coeff_table_load_5_reg_710 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal qft_coeff_table_load_6_reg_715 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal qft_coeff_table_load_7_reg_720 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal qft_coeff_table_load_8_reg_725 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal qft_coeff_table_load_9_reg_730 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal qft_coeff_table_load_10_reg_735 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal qft_coeff_table_load_11_reg_740 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal qft_coeff_table_load_12_reg_745 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal qft_coeff_table_load_13_reg_750 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal qft_coeff_table_load_14_reg_755 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal buf_temp_qft_0_0_V_fu_589_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_0_V_reg_760 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal buf_temp_qft_0_1_V_fu_595_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_1_V_reg_765 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_2_V_fu_601_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_2_V_reg_770 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_3_V_fu_607_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_3_V_reg_775 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_0_V_fu_613_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_0_V_reg_780 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_1_V_fu_619_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_1_V_reg_785 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_2_V_fu_625_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_2_V_reg_790 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_3_V_fu_631_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_3_V_reg_795 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_0_V_fu_637_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_0_V_reg_800 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_1_V_fu_643_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_1_V_reg_805 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_2_V_fu_649_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_2_V_reg_810 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_3_V_fu_655_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_3_V_reg_815 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_0_V_fu_661_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_0_V_reg_820 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_1_V_fu_667_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_1_V_reg_825 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_2_V_fu_673_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_2_V_reg_830 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_3_V_fu_679_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_3_V_reg_835 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal call_ret_integer_idct_fu_84_ap_ready : STD_LOGIC;
    signal call_ret_integer_idct_fu_84_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret_integer_idct_fu_84_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_ready : STD_LOGIC;
    signal call_ret2_i_dct_step_fu_104_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_i_dct_step_fu_104_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_ready : STD_LOGIC;
    signal call_ret_i_dct_step_fu_124_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_i_dct_step_fu_124_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_start : STD_LOGIC;
    signal grp_read_data_fu_144_ap_done : STD_LOGIC;
    signal grp_read_data_fu_144_ap_idle : STD_LOGIC;
    signal grp_read_data_fu_144_ap_ready : STD_LOGIC;
    signal grp_read_data_fu_144_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_data_fu_144_input_r_ce0 : STD_LOGIC;
    signal grp_read_data_fu_144_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_data_fu_144_input_r_ce1 : STD_LOGIC;
    signal grp_read_data_fu_144_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_144_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_150_ap_start : STD_LOGIC;
    signal grp_write_data_fu_150_ap_done : STD_LOGIC;
    signal grp_write_data_fu_150_ap_idle : STD_LOGIC;
    signal grp_write_data_fu_150_ap_ready : STD_LOGIC;
    signal grp_write_data_fu_150_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_data_fu_150_output_r_ce0 : STD_LOGIC;
    signal grp_write_data_fu_150_output_r_we0 : STD_LOGIC;
    signal grp_write_data_fu_150_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_write_data_fu_150_output_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_data_fu_150_output_r_ce1 : STD_LOGIC;
    signal grp_write_data_fu_150_output_r_we1 : STD_LOGIC;
    signal grp_write_data_fu_150_output_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_grp_read_data_fu_144_ap_start : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_NS_fsm_state9 : STD_LOGIC;
    signal ap_reg_grp_write_data_fu_150_ap_start : STD_LOGIC := '0';
    signal ap_NS_fsm_state18 : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal buf_temp_qft_0_0_V_fu_589_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_0_1_V_fu_595_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_0_2_V_fu_601_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_0_3_V_fu_607_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_1_0_V_fu_613_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_1_1_V_fu_619_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_1_2_V_fu_625_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_1_3_V_fu_631_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_2_0_V_fu_637_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_2_1_V_fu_643_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_2_2_V_fu_649_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_2_3_V_fu_655_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_3_0_V_fu_661_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_3_1_V_fu_667_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_3_2_V_fu_673_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_3_3_V_fu_679_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_temp_qft_0_0_V_fu_589_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_1_V_fu_595_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_2_V_fu_601_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_0_3_V_fu_607_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_0_V_fu_613_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_1_V_fu_619_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_2_V_fu_625_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_1_3_V_fu_631_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_0_V_fu_637_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_1_V_fu_643_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_2_V_fu_649_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_2_3_V_fu_655_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_0_V_fu_661_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_1_V_fu_667_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_2_V_fu_673_p10 : STD_LOGIC_VECTOR (19 downto 0);
    signal buf_temp_qft_3_3_V_fu_679_p10 : STD_LOGIC_VECTOR (19 downto 0);

    component integer_idct IS
    port (
        ap_ready : OUT STD_LOGIC;
        src_0_0_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_0_1_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_0_2_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_0_3_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_1_0_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_1_1_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_1_2_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_1_3_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_2_0_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_2_1_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_2_2_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_2_3_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_3_0_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_3_1_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_3_2_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        src_3_3_V_read : IN STD_LOGIC_VECTOR (19 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dct_step IS
    port (
        ap_ready : OUT STD_LOGIC;
        src_0_0_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_0_1_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_0_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_0_3_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_1_0_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_1_1_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_1_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_1_3_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_2_0_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_2_1_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_2_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_2_3_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_3_0_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_3_1_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_3_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
        src_3_3_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component read_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component write_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        buf_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component add_watermark_mulcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component add_watermark_qftbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    qft_coeff_table_U : component add_watermark_qftbkb
    generic map (
        DataWidth => 6,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => qft_coeff_table_address0,
        ce0 => qft_coeff_table_ce0,
        q0 => qft_coeff_table_q0);

    call_ret_integer_idct_fu_84 : component integer_idct
    port map (
        ap_ready => call_ret_integer_idct_fu_84_ap_ready,
        src_0_0_V_read => buf_temp_qft_0_0_V_reg_760,
        src_0_1_V_read => buf_temp_qft_0_1_V_reg_765,
        src_0_2_V_read => buf_temp_qft_0_2_V_reg_770,
        src_0_3_V_read => buf_temp_qft_0_3_V_reg_775,
        src_1_0_V_read => buf_temp_qft_1_0_V_reg_780,
        src_1_1_V_read => buf_temp_qft_1_1_V_reg_785,
        src_1_2_V_read => buf_temp_qft_1_2_V_reg_790,
        src_1_3_V_read => buf_temp_qft_1_3_V_reg_795,
        src_2_0_V_read => buf_temp_qft_2_0_V_reg_800,
        src_2_1_V_read => buf_temp_qft_2_1_V_reg_805,
        src_2_2_V_read => buf_temp_qft_2_2_V_reg_810,
        src_2_3_V_read => buf_temp_qft_2_3_V_reg_815,
        src_3_0_V_read => buf_temp_qft_3_0_V_reg_820,
        src_3_1_V_read => buf_temp_qft_3_1_V_reg_825,
        src_3_2_V_read => buf_temp_qft_3_2_V_reg_830,
        src_3_3_V_read => buf_temp_qft_3_3_V_reg_835,
        ap_return_0 => call_ret_integer_idct_fu_84_ap_return_0,
        ap_return_1 => call_ret_integer_idct_fu_84_ap_return_1,
        ap_return_2 => call_ret_integer_idct_fu_84_ap_return_2,
        ap_return_3 => call_ret_integer_idct_fu_84_ap_return_3,
        ap_return_4 => call_ret_integer_idct_fu_84_ap_return_4,
        ap_return_5 => call_ret_integer_idct_fu_84_ap_return_5,
        ap_return_6 => call_ret_integer_idct_fu_84_ap_return_6,
        ap_return_7 => call_ret_integer_idct_fu_84_ap_return_7,
        ap_return_8 => call_ret_integer_idct_fu_84_ap_return_8,
        ap_return_9 => call_ret_integer_idct_fu_84_ap_return_9,
        ap_return_10 => call_ret_integer_idct_fu_84_ap_return_10,
        ap_return_11 => call_ret_integer_idct_fu_84_ap_return_11,
        ap_return_12 => call_ret_integer_idct_fu_84_ap_return_12,
        ap_return_13 => call_ret_integer_idct_fu_84_ap_return_13,
        ap_return_14 => call_ret_integer_idct_fu_84_ap_return_14,
        ap_return_15 => call_ret_integer_idct_fu_84_ap_return_15);

    call_ret2_i_dct_step_fu_104 : component dct_step
    port map (
        ap_ready => call_ret2_i_dct_step_fu_104_ap_ready,
        src_0_0_read => grp_read_data_fu_144_ap_return_0,
        src_0_1_read => grp_read_data_fu_144_ap_return_1,
        src_0_2_read => grp_read_data_fu_144_ap_return_2,
        src_0_3_read => grp_read_data_fu_144_ap_return_3,
        src_1_0_read => grp_read_data_fu_144_ap_return_4,
        src_1_1_read => grp_read_data_fu_144_ap_return_5,
        src_1_2_read => grp_read_data_fu_144_ap_return_6,
        src_1_3_read => grp_read_data_fu_144_ap_return_7,
        src_2_0_read => grp_read_data_fu_144_ap_return_8,
        src_2_1_read => grp_read_data_fu_144_ap_return_9,
        src_2_2_read => grp_read_data_fu_144_ap_return_10,
        src_2_3_read => grp_read_data_fu_144_ap_return_11,
        src_3_0_read => grp_read_data_fu_144_ap_return_12,
        src_3_1_read => grp_read_data_fu_144_ap_return_13,
        src_3_2_read => grp_read_data_fu_144_ap_return_14,
        src_3_3_read => grp_read_data_fu_144_ap_return_15,
        ap_return_0 => call_ret2_i_dct_step_fu_104_ap_return_0,
        ap_return_1 => call_ret2_i_dct_step_fu_104_ap_return_1,
        ap_return_2 => call_ret2_i_dct_step_fu_104_ap_return_2,
        ap_return_3 => call_ret2_i_dct_step_fu_104_ap_return_3,
        ap_return_4 => call_ret2_i_dct_step_fu_104_ap_return_4,
        ap_return_5 => call_ret2_i_dct_step_fu_104_ap_return_5,
        ap_return_6 => call_ret2_i_dct_step_fu_104_ap_return_6,
        ap_return_7 => call_ret2_i_dct_step_fu_104_ap_return_7,
        ap_return_8 => call_ret2_i_dct_step_fu_104_ap_return_8,
        ap_return_9 => call_ret2_i_dct_step_fu_104_ap_return_9,
        ap_return_10 => call_ret2_i_dct_step_fu_104_ap_return_10,
        ap_return_11 => call_ret2_i_dct_step_fu_104_ap_return_11,
        ap_return_12 => call_ret2_i_dct_step_fu_104_ap_return_12,
        ap_return_13 => call_ret2_i_dct_step_fu_104_ap_return_13,
        ap_return_14 => call_ret2_i_dct_step_fu_104_ap_return_14,
        ap_return_15 => call_ret2_i_dct_step_fu_104_ap_return_15);

    call_ret_i_dct_step_fu_124 : component dct_step
    port map (
        ap_ready => call_ret_i_dct_step_fu_124_ap_ready,
        src_0_0_read => call_ret2_i_dct_step_fu_104_ap_return_0,
        src_0_1_read => call_ret2_i_dct_step_fu_104_ap_return_1,
        src_0_2_read => call_ret2_i_dct_step_fu_104_ap_return_2,
        src_0_3_read => call_ret2_i_dct_step_fu_104_ap_return_3,
        src_1_0_read => call_ret2_i_dct_step_fu_104_ap_return_4,
        src_1_1_read => call_ret2_i_dct_step_fu_104_ap_return_5,
        src_1_2_read => call_ret2_i_dct_step_fu_104_ap_return_6,
        src_1_3_read => call_ret2_i_dct_step_fu_104_ap_return_7,
        src_2_0_read => call_ret2_i_dct_step_fu_104_ap_return_8,
        src_2_1_read => call_ret2_i_dct_step_fu_104_ap_return_9,
        src_2_2_read => call_ret2_i_dct_step_fu_104_ap_return_10,
        src_2_3_read => call_ret2_i_dct_step_fu_104_ap_return_11,
        src_3_0_read => call_ret2_i_dct_step_fu_104_ap_return_12,
        src_3_1_read => call_ret2_i_dct_step_fu_104_ap_return_13,
        src_3_2_read => call_ret2_i_dct_step_fu_104_ap_return_14,
        src_3_3_read => call_ret2_i_dct_step_fu_104_ap_return_15,
        ap_return_0 => call_ret_i_dct_step_fu_124_ap_return_0,
        ap_return_1 => call_ret_i_dct_step_fu_124_ap_return_1,
        ap_return_2 => call_ret_i_dct_step_fu_124_ap_return_2,
        ap_return_3 => call_ret_i_dct_step_fu_124_ap_return_3,
        ap_return_4 => call_ret_i_dct_step_fu_124_ap_return_4,
        ap_return_5 => call_ret_i_dct_step_fu_124_ap_return_5,
        ap_return_6 => call_ret_i_dct_step_fu_124_ap_return_6,
        ap_return_7 => call_ret_i_dct_step_fu_124_ap_return_7,
        ap_return_8 => call_ret_i_dct_step_fu_124_ap_return_8,
        ap_return_9 => call_ret_i_dct_step_fu_124_ap_return_9,
        ap_return_10 => call_ret_i_dct_step_fu_124_ap_return_10,
        ap_return_11 => call_ret_i_dct_step_fu_124_ap_return_11,
        ap_return_12 => call_ret_i_dct_step_fu_124_ap_return_12,
        ap_return_13 => call_ret_i_dct_step_fu_124_ap_return_13,
        ap_return_14 => call_ret_i_dct_step_fu_124_ap_return_14,
        ap_return_15 => call_ret_i_dct_step_fu_124_ap_return_15);

    grp_read_data_fu_144 : component read_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_read_data_fu_144_ap_start,
        ap_done => grp_read_data_fu_144_ap_done,
        ap_idle => grp_read_data_fu_144_ap_idle,
        ap_ready => grp_read_data_fu_144_ap_ready,
        input_r_address0 => grp_read_data_fu_144_input_r_address0,
        input_r_ce0 => grp_read_data_fu_144_input_r_ce0,
        input_r_q0 => indata_q0,
        input_r_address1 => grp_read_data_fu_144_input_r_address1,
        input_r_ce1 => grp_read_data_fu_144_input_r_ce1,
        input_r_q1 => indata_q1,
        ap_return_0 => grp_read_data_fu_144_ap_return_0,
        ap_return_1 => grp_read_data_fu_144_ap_return_1,
        ap_return_2 => grp_read_data_fu_144_ap_return_2,
        ap_return_3 => grp_read_data_fu_144_ap_return_3,
        ap_return_4 => grp_read_data_fu_144_ap_return_4,
        ap_return_5 => grp_read_data_fu_144_ap_return_5,
        ap_return_6 => grp_read_data_fu_144_ap_return_6,
        ap_return_7 => grp_read_data_fu_144_ap_return_7,
        ap_return_8 => grp_read_data_fu_144_ap_return_8,
        ap_return_9 => grp_read_data_fu_144_ap_return_9,
        ap_return_10 => grp_read_data_fu_144_ap_return_10,
        ap_return_11 => grp_read_data_fu_144_ap_return_11,
        ap_return_12 => grp_read_data_fu_144_ap_return_12,
        ap_return_13 => grp_read_data_fu_144_ap_return_13,
        ap_return_14 => grp_read_data_fu_144_ap_return_14,
        ap_return_15 => grp_read_data_fu_144_ap_return_15);

    grp_write_data_fu_150 : component write_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_write_data_fu_150_ap_start,
        ap_done => grp_write_data_fu_150_ap_done,
        ap_idle => grp_write_data_fu_150_ap_idle,
        ap_ready => grp_write_data_fu_150_ap_ready,
        buf_0_0_read => call_ret_integer_idct_fu_84_ap_return_0,
        buf_0_1_read => call_ret_integer_idct_fu_84_ap_return_1,
        buf_0_2_read => call_ret_integer_idct_fu_84_ap_return_2,
        buf_0_3_read => call_ret_integer_idct_fu_84_ap_return_3,
        buf_1_0_read => call_ret_integer_idct_fu_84_ap_return_4,
        buf_1_1_read => call_ret_integer_idct_fu_84_ap_return_5,
        buf_1_2_read => call_ret_integer_idct_fu_84_ap_return_6,
        buf_1_3_read => call_ret_integer_idct_fu_84_ap_return_7,
        buf_2_0_read => call_ret_integer_idct_fu_84_ap_return_8,
        buf_2_1_read => call_ret_integer_idct_fu_84_ap_return_9,
        buf_2_2_read => call_ret_integer_idct_fu_84_ap_return_10,
        buf_2_3_read => call_ret_integer_idct_fu_84_ap_return_11,
        buf_3_0_read => call_ret_integer_idct_fu_84_ap_return_12,
        buf_3_1_read => call_ret_integer_idct_fu_84_ap_return_13,
        buf_3_2_read => call_ret_integer_idct_fu_84_ap_return_14,
        buf_3_3_read => call_ret_integer_idct_fu_84_ap_return_15,
        output_r_address0 => grp_write_data_fu_150_output_r_address0,
        output_r_ce0 => grp_write_data_fu_150_output_r_ce0,
        output_r_we0 => grp_write_data_fu_150_output_r_we0,
        output_r_d0 => grp_write_data_fu_150_output_r_d0,
        output_r_address1 => grp_write_data_fu_150_output_r_address1,
        output_r_ce1 => grp_write_data_fu_150_output_r_ce1,
        output_r_we1 => grp_write_data_fu_150_output_r_we1,
        output_r_d1 => grp_write_data_fu_150_output_r_d1);

    add_watermark_mulcud_U67 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_0,
        din1 => buf_temp_qft_0_0_V_fu_589_p1,
        dout => buf_temp_qft_0_0_V_fu_589_p2);

    add_watermark_mulcud_U68 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_1,
        din1 => buf_temp_qft_0_1_V_fu_595_p1,
        dout => buf_temp_qft_0_1_V_fu_595_p2);

    add_watermark_mulcud_U69 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_2,
        din1 => buf_temp_qft_0_2_V_fu_601_p1,
        dout => buf_temp_qft_0_2_V_fu_601_p2);

    add_watermark_mulcud_U70 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_3,
        din1 => buf_temp_qft_0_3_V_fu_607_p1,
        dout => buf_temp_qft_0_3_V_fu_607_p2);

    add_watermark_mulcud_U71 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_4,
        din1 => buf_temp_qft_1_0_V_fu_613_p1,
        dout => buf_temp_qft_1_0_V_fu_613_p2);

    add_watermark_mulcud_U72 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_5,
        din1 => buf_temp_qft_1_1_V_fu_619_p1,
        dout => buf_temp_qft_1_1_V_fu_619_p2);

    add_watermark_mulcud_U73 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_6,
        din1 => buf_temp_qft_1_2_V_fu_625_p1,
        dout => buf_temp_qft_1_2_V_fu_625_p2);

    add_watermark_mulcud_U74 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_7,
        din1 => buf_temp_qft_1_3_V_fu_631_p1,
        dout => buf_temp_qft_1_3_V_fu_631_p2);

    add_watermark_mulcud_U75 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_8,
        din1 => buf_temp_qft_2_0_V_fu_637_p1,
        dout => buf_temp_qft_2_0_V_fu_637_p2);

    add_watermark_mulcud_U76 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_9,
        din1 => buf_temp_qft_2_1_V_fu_643_p1,
        dout => buf_temp_qft_2_1_V_fu_643_p2);

    add_watermark_mulcud_U77 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_10,
        din1 => buf_temp_qft_2_2_V_fu_649_p1,
        dout => buf_temp_qft_2_2_V_fu_649_p2);

    add_watermark_mulcud_U78 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_11,
        din1 => buf_temp_qft_2_3_V_fu_655_p1,
        dout => buf_temp_qft_2_3_V_fu_655_p2);

    add_watermark_mulcud_U79 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_12,
        din1 => buf_temp_qft_3_0_V_fu_661_p1,
        dout => buf_temp_qft_3_0_V_fu_661_p2);

    add_watermark_mulcud_U80 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_13,
        din1 => buf_temp_qft_3_1_V_fu_667_p1,
        dout => buf_temp_qft_3_1_V_fu_667_p2);

    add_watermark_mulcud_U81 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_14,
        din1 => buf_temp_qft_3_2_V_fu_673_p1,
        dout => buf_temp_qft_3_2_V_fu_673_p2);

    add_watermark_mulcud_U82 : component add_watermark_mulcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        dout_WIDTH => 20)
    port map (
        din0 => call_ret_i_dct_step_fu_124_ap_return_15,
        din1 => buf_temp_qft_3_3_V_fu_679_p1,
        dout => buf_temp_qft_3_3_V_fu_679_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_read_data_fu_144_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_read_data_fu_144_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state9) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_reg_grp_read_data_fu_144_ap_start <= ap_const_logic_1;
                elsif ((grp_read_data_fu_144_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_read_data_fu_144_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_write_data_fu_150_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_write_data_fu_150_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state18) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    ap_reg_grp_write_data_fu_150_ap_start <= ap_const_logic_1;
                elsif ((grp_write_data_fu_150_ap_ready = ap_const_logic_1)) then 
                    ap_reg_grp_write_data_fu_150_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                buf_temp_qft_0_0_V_reg_760 <= buf_temp_qft_0_0_V_fu_589_p2;
                buf_temp_qft_0_1_V_reg_765 <= buf_temp_qft_0_1_V_fu_595_p2;
                buf_temp_qft_0_2_V_reg_770 <= buf_temp_qft_0_2_V_fu_601_p2;
                buf_temp_qft_0_3_V_reg_775 <= buf_temp_qft_0_3_V_fu_607_p2;
                buf_temp_qft_1_0_V_reg_780 <= buf_temp_qft_1_0_V_fu_613_p2;
                buf_temp_qft_1_1_V_reg_785 <= buf_temp_qft_1_1_V_fu_619_p2;
                buf_temp_qft_1_2_V_reg_790 <= buf_temp_qft_1_2_V_fu_625_p2;
                buf_temp_qft_1_3_V_reg_795 <= buf_temp_qft_1_3_V_fu_631_p2;
                buf_temp_qft_2_0_V_reg_800 <= buf_temp_qft_2_0_V_fu_637_p2;
                buf_temp_qft_2_1_V_reg_805 <= buf_temp_qft_2_1_V_fu_643_p2;
                buf_temp_qft_2_2_V_reg_810 <= buf_temp_qft_2_2_V_fu_649_p2;
                buf_temp_qft_2_3_V_reg_815 <= buf_temp_qft_2_3_V_fu_655_p2;
                buf_temp_qft_3_0_V_reg_820 <= buf_temp_qft_3_0_V_fu_661_p2;
                buf_temp_qft_3_1_V_reg_825 <= buf_temp_qft_3_1_V_fu_667_p2;
                buf_temp_qft_3_2_V_reg_830 <= buf_temp_qft_3_2_V_fu_673_p2;
                buf_temp_qft_3_3_V_reg_835 <= buf_temp_qft_3_3_V_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                qft_coeff_table_load_10_reg_735 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                qft_coeff_table_load_11_reg_740 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                qft_coeff_table_load_12_reg_745 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                qft_coeff_table_load_13_reg_750 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                qft_coeff_table_load_14_reg_755 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                qft_coeff_table_load_1_reg_690 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                qft_coeff_table_load_2_reg_695 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                qft_coeff_table_load_3_reg_700 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                qft_coeff_table_load_4_reg_705 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                qft_coeff_table_load_5_reg_710 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                qft_coeff_table_load_6_reg_715 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                qft_coeff_table_load_7_reg_720 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                qft_coeff_table_load_8_reg_725 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                qft_coeff_table_load_9_reg_730 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                qft_coeff_table_load_reg_685 <= qft_coeff_table_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state18 <= ap_NS_fsm(17);
    ap_NS_fsm_state9 <= ap_NS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_temp_qft_0_0_V_fu_589_p1 <= buf_temp_qft_0_0_V_fu_589_p10(6 - 1 downto 0);
    buf_temp_qft_0_0_V_fu_589_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_reg_685),20));
    buf_temp_qft_0_1_V_fu_595_p1 <= buf_temp_qft_0_1_V_fu_595_p10(6 - 1 downto 0);
    buf_temp_qft_0_1_V_fu_595_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_1_reg_690),20));
    buf_temp_qft_0_2_V_fu_601_p1 <= buf_temp_qft_0_2_V_fu_601_p10(6 - 1 downto 0);
    buf_temp_qft_0_2_V_fu_601_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_2_reg_695),20));
    buf_temp_qft_0_3_V_fu_607_p1 <= buf_temp_qft_0_3_V_fu_607_p10(6 - 1 downto 0);
    buf_temp_qft_0_3_V_fu_607_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_3_reg_700),20));
    buf_temp_qft_1_0_V_fu_613_p1 <= buf_temp_qft_1_0_V_fu_613_p10(6 - 1 downto 0);
    buf_temp_qft_1_0_V_fu_613_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_4_reg_705),20));
    buf_temp_qft_1_1_V_fu_619_p1 <= buf_temp_qft_1_1_V_fu_619_p10(6 - 1 downto 0);
    buf_temp_qft_1_1_V_fu_619_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_5_reg_710),20));
    buf_temp_qft_1_2_V_fu_625_p1 <= buf_temp_qft_1_2_V_fu_625_p10(6 - 1 downto 0);
    buf_temp_qft_1_2_V_fu_625_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_6_reg_715),20));
    buf_temp_qft_1_3_V_fu_631_p1 <= buf_temp_qft_1_3_V_fu_631_p10(6 - 1 downto 0);
    buf_temp_qft_1_3_V_fu_631_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_7_reg_720),20));
    buf_temp_qft_2_0_V_fu_637_p1 <= buf_temp_qft_2_0_V_fu_637_p10(6 - 1 downto 0);
    buf_temp_qft_2_0_V_fu_637_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_8_reg_725),20));
    buf_temp_qft_2_1_V_fu_643_p1 <= buf_temp_qft_2_1_V_fu_643_p10(6 - 1 downto 0);
    buf_temp_qft_2_1_V_fu_643_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_9_reg_730),20));
    buf_temp_qft_2_2_V_fu_649_p1 <= buf_temp_qft_2_2_V_fu_649_p10(6 - 1 downto 0);
    buf_temp_qft_2_2_V_fu_649_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_10_reg_735),20));
    buf_temp_qft_2_3_V_fu_655_p1 <= buf_temp_qft_2_3_V_fu_655_p10(6 - 1 downto 0);
    buf_temp_qft_2_3_V_fu_655_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_11_reg_740),20));
    buf_temp_qft_3_0_V_fu_661_p1 <= buf_temp_qft_3_0_V_fu_661_p10(6 - 1 downto 0);
    buf_temp_qft_3_0_V_fu_661_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_12_reg_745),20));
    buf_temp_qft_3_1_V_fu_667_p1 <= buf_temp_qft_3_1_V_fu_667_p10(6 - 1 downto 0);
    buf_temp_qft_3_1_V_fu_667_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_13_reg_750),20));
    buf_temp_qft_3_2_V_fu_673_p1 <= buf_temp_qft_3_2_V_fu_673_p10(6 - 1 downto 0);
    buf_temp_qft_3_2_V_fu_673_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_load_14_reg_755),20));
    buf_temp_qft_3_3_V_fu_679_p1 <= buf_temp_qft_3_3_V_fu_679_p10(6 - 1 downto 0);
    buf_temp_qft_3_3_V_fu_679_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qft_coeff_table_q0),20));
    grp_read_data_fu_144_ap_start <= ap_reg_grp_read_data_fu_144_ap_start;
    grp_write_data_fu_150_ap_start <= ap_reg_grp_write_data_fu_150_ap_start;
    indata_address0 <= grp_read_data_fu_144_input_r_address0;
    indata_address1 <= grp_read_data_fu_144_input_r_address1;
    indata_ce0 <= grp_read_data_fu_144_input_r_ce0;
    indata_ce1 <= grp_read_data_fu_144_input_r_ce1;
    outdata_address0 <= grp_write_data_fu_150_output_r_address0;
    outdata_address1 <= grp_write_data_fu_150_output_r_address1;
    outdata_ce0 <= grp_write_data_fu_150_output_r_ce0;
    outdata_ce1 <= grp_write_data_fu_150_output_r_ce1;
    outdata_d0 <= grp_write_data_fu_150_output_r_d0;
    outdata_d1 <= grp_write_data_fu_150_output_r_d1;
    outdata_we0 <= grp_write_data_fu_150_output_r_we0;
    outdata_we1 <= grp_write_data_fu_150_output_r_we1;

    qft_coeff_table_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            qft_coeff_table_address0 <= ap_const_lv4_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            qft_coeff_table_address0 <= ap_const_lv4_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            qft_coeff_table_address0 <= ap_const_lv4_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            qft_coeff_table_address0 <= ap_const_lv4_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            qft_coeff_table_address0 <= ap_const_lv4_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            qft_coeff_table_address0 <= ap_const_lv4_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            qft_coeff_table_address0 <= ap_const_lv4_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            qft_coeff_table_address0 <= ap_const_lv4_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            qft_coeff_table_address0 <= ap_const_lv4_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            qft_coeff_table_address0 <= ap_const_lv4_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            qft_coeff_table_address0 <= ap_const_lv4_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            qft_coeff_table_address0 <= ap_const_lv4_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            qft_coeff_table_address0 <= ap_const_lv4_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            qft_coeff_table_address0 <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            qft_coeff_table_address0 <= ap_const_lv4_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            qft_coeff_table_address0 <= ap_const_lv4_0;
        else 
            qft_coeff_table_address0 <= "XXXX";
        end if; 
    end process;


    qft_coeff_table_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            qft_coeff_table_ce0 <= ap_const_logic_1;
        else 
            qft_coeff_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp1_address0 <= ap_const_lv4_0;
    temp1_address1 <= ap_const_lv4_0;
    temp1_ce0 <= ap_const_logic_0;
    temp1_ce1 <= ap_const_logic_0;
    temp1_d0 <= ap_const_lv16_0;
    temp1_d1 <= ap_const_lv16_0;
    temp1_we0 <= ap_const_logic_0;
    temp1_we1 <= ap_const_logic_0;
    temp_address0 <= ap_const_lv4_0;
    temp_address1 <= ap_const_lv4_0;
    temp_ce0 <= ap_const_logic_0;
    temp_ce1 <= ap_const_logic_0;
    temp_d0 <= ap_const_lv16_0;
    temp_d1 <= ap_const_lv16_0;
    temp_we0 <= ap_const_logic_0;
    temp_we1 <= ap_const_logic_0;
end behav;
