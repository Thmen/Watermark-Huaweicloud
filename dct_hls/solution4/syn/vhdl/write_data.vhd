-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_data is
port (
    ap_ready : OUT STD_LOGIC;
    buf_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    buf_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of write_data is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';



begin



    ap_ready <= ap_const_logic_1;
    ap_return_0 <= buf_0_0_read;
    ap_return_1 <= buf_0_1_read;
    ap_return_10 <= buf_2_2_read;
    ap_return_11 <= buf_2_3_read;
    ap_return_12 <= buf_3_0_read;
    ap_return_13 <= buf_3_1_read;
    ap_return_14 <= buf_3_2_read;
    ap_return_15 <= buf_3_3_read;
    ap_return_2 <= buf_0_2_read;
    ap_return_3 <= buf_0_3_read;
    ap_return_4 <= buf_1_0_read;
    ap_return_5 <= buf_1_1_read;
    ap_return_6 <= buf_1_2_read;
    ap_return_7 <= buf_1_3_read;
    ap_return_8 <= buf_2_0_read;
    ap_return_9 <= buf_2_1_read;
end behav;
