// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _write_data_HH_
#define _write_data_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct write_data : public sc_module {
    // Port declarations 33
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > buf_0_0_read;
    sc_in< sc_lv<8> > buf_0_1_read;
    sc_in< sc_lv<8> > buf_0_2_read;
    sc_in< sc_lv<8> > buf_0_3_read;
    sc_in< sc_lv<8> > buf_1_0_read;
    sc_in< sc_lv<8> > buf_1_1_read;
    sc_in< sc_lv<8> > buf_1_2_read;
    sc_in< sc_lv<8> > buf_1_3_read;
    sc_in< sc_lv<8> > buf_2_0_read;
    sc_in< sc_lv<8> > buf_2_1_read;
    sc_in< sc_lv<8> > buf_2_2_read;
    sc_in< sc_lv<8> > buf_2_3_read;
    sc_in< sc_lv<8> > buf_3_0_read;
    sc_in< sc_lv<8> > buf_3_1_read;
    sc_in< sc_lv<8> > buf_3_2_read;
    sc_in< sc_lv<8> > buf_3_3_read;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;
    sc_out< sc_lv<8> > ap_return_7;
    sc_out< sc_lv<8> > ap_return_8;
    sc_out< sc_lv<8> > ap_return_9;
    sc_out< sc_lv<8> > ap_return_10;
    sc_out< sc_lv<8> > ap_return_11;
    sc_out< sc_lv<8> > ap_return_12;
    sc_out< sc_lv<8> > ap_return_13;
    sc_out< sc_lv<8> > ap_return_14;
    sc_out< sc_lv<8> > ap_return_15;


    // Module declarations
    write_data(sc_module_name name);
    SC_HAS_PROCESS(write_data);

    ~write_data();

    sc_trace_file* mVcdFile;

    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_12();
    void thread_ap_return_13();
    void thread_ap_return_14();
    void thread_ap_return_15();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
};

}

using namespace ap_rtl;

#endif
